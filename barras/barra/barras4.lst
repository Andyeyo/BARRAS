;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 22/11/2018 8:33:57
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF00AEFEF  	GOTO        5598
_init_485:
;setup.c,55 :: 		void init_485(void)
;setup.c,72 :: 		}
L_end_init_485:
0x0006	0x0012      	RETURN      0
; end of _init_485
_interrupt:
;barras4.c,16 :: 		void interrupt()
0x0008	0xF018C000  	MOVFF       R0, 24
0x000C	0xF017C001  	MOVFF       R1, 23
0x0010	0xF016C002  	MOVFF       R2, 22
0x0014	0xF015C003  	MOVFF       R3, 21
;barras4.c,18 :: 		RS485Slave_Receive(datoRecibido);
0x0018	0xF01BCFE1  	MOVFF       FSR1L, 27
0x001C	0xF01CCFE2  	MOVFF       FSR1H, 28
0x0020	0xF019CFE9  	MOVFF       FSR0L, 25
0x0024	0xF01ACFEA  	MOVFF       FSR0H, 26
0x0028	0x0E3C      	MOVLW       _datoRecibido
0x002A	0x0101      	MOVLB       1
0x002C	0x6F65      	MOVWF       FARG_RS485Slave_Receive_data_buffer, 1
0x002E	0x0E01      	MOVLW       hi_addr(_datoRecibido)
0x0030	0x6F66      	MOVWF       FARG_RS485Slave_Receive_data_buffer+1, 1
0x0032	0xF007EC32  	CALL        _RS485Slave_Receive, 0
;barras4.c,19 :: 		}
L_end_interrupt:
L__interrupt14:
0x0036	0xF000C018  	MOVFF       24, R0
0x003A	0xF001C017  	MOVFF       23, R1
0x003E	0xF002C016  	MOVFF       22, R2
0x0042	0xF003C015  	MOVFF       21, R3
0x0046	0xFFE9C019  	MOVFF       25, FSR0L
0x004A	0xFFEAC01A  	MOVFF       26, FSR0H
0x004E	0xFFE1C01B  	MOVFF       27, FSR1L
0x0052	0xFFE2C01C  	MOVFF       28, FSR1H
0x0056	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x0058	0xB2AC      	BTFSC       TXSTA, 1 
0x005A	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x005C	0x0000      	NOP
0x005E	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x0060	0xFFADC164  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0064	0x0012      	RETURN      0
; end of _UART1_Write
_SPI1_Write:
;__Lib_SPI_c345.c,76 :: 		
;__Lib_SPI_c345.c,79 :: 		
0x0066	0xFFC9C164  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,80 :: 		
L_SPI1_Write8:
0x006A	0xB0C7      	BTFSC       SSPSTAT, 0 
0x006C	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_c345.c,81 :: 		
0x006E	0x0000      	NOP
0x0070	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,82 :: 		
0x0072	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,84 :: 		
L_end_SPI1_Write:
0x0076	0x0012      	RETURN      0
; end of _SPI1_Write
_UART1_Read:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,42 :: 		
0x0078	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67.c,43 :: 		
0x007C	0xA2AB      	BTFSS       RCSTA, 1 
0x007E	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67.c,44 :: 		
0x0080	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67.c,45 :: 		
0x0082	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67.c,46 :: 		
L_UART1_Read2:
;__Lib_UART_c67.c,47 :: 		
0x0084	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67.c,48 :: 		
L_end_UART1_Read:
0x0088	0x0012      	RETURN      0
; end of _UART1_Read
_UART1_Tx_Idle:
;__Lib_UART_c67.c,52 :: 		
;__Lib_UART_c67.c,53 :: 		
0x008A	0x0E00      	MOVLW       0
0x008C	0xB2AC      	BTFSC       TXSTA, 1 
0x008E	0x0E01      	MOVLW       1
0x0090	0x6E00      	MOVWF       R0 
;__Lib_UART_c67.c,54 :: 		
L_end_UART1_Tx_Idle:
0x0092	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_UART1_Data_Ready:
;__Lib_UART_c67.c,34 :: 		
;__Lib_UART_c67.c,35 :: 		
0x0094	0x0E00      	MOVLW       0
0x0096	0xBA9E      	BTFSC       PIR1, 5 
0x0098	0x0E01      	MOVLW       1
0x009A	0x6E00      	MOVWF       R0 
;__Lib_UART_c67.c,36 :: 		
L_end_UART1_Data_Ready:
0x009C	0x0012      	RETURN      0
; end of _UART1_Data_Ready
_EEPROM_Read:
;__Lib_EEPROM_1024.c,8 :: 		
;__Lib_EEPROM_1024.c,10 :: 		
0x009E	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_1024.c,11 :: 		
0x00A0	0xFFAAC162  	MOVFF       FARG_EEPROM_Read_address+1, EEADRH
;__Lib_EEPROM_1024.c,12 :: 		
0x00A4	0xFFA9C161  	MOVFF       FARG_EEPROM_Read_address, EEADR
;__Lib_EEPROM_1024.c,13 :: 		
0x00A8	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_1024.c,14 :: 		
0x00AA	0x80A6      	BSF         EECON1, 0 
;__Lib_EEPROM_1024.c,16 :: 		
0x00AC	0xF000CFA8  	MOVFF       EEDATA, R0
;__Lib_EEPROM_1024.c,18 :: 		
L_end_EEPROM_Read:
0x00B0	0x0012      	RETURN      0
; end of _EEPROM_Read
_EEPROM_Write:
;__Lib_EEPROM_1024.c,23 :: 		
;__Lib_EEPROM_1024.c,26 :: 		
L_EEPROM_Write0:
0x00B2	0xA2A6      	BTFSS       EECON1, 1 
0x00B4	0xD002      	BRA         L_EEPROM_Write1
;__Lib_EEPROM_1024.c,27 :: 		
0x00B6	0x0000      	NOP
0x00B8	0xD7FC      	BRA         L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_1024.c,28 :: 		
0x00BA	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_1024.c,29 :: 		
0x00BC	0xFFAAC162  	MOVFF       FARG_EEPROM_Write_address+1, EEADRH
;__Lib_EEPROM_1024.c,30 :: 		
0x00C0	0xFFA9C161  	MOVFF       FARG_EEPROM_Write_address, EEADR
;__Lib_EEPROM_1024.c,31 :: 		
0x00C4	0xFFA8C163  	MOVFF       FARG_EEPROM_Write_data_, EEDATA
;__Lib_EEPROM_1024.c,32 :: 		
0x00C8	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_1024.c,33 :: 		
0x00CA	0x84A6      	BSF         EECON1, 2 
;__Lib_EEPROM_1024.c,35 :: 		
0x00CC	0xF000CFF2  	MOVFF       INTCON, R0
;__Lib_EEPROM_1024.c,38 :: 		
0x00D0	0x9EF2      	BCF         INTCON, 7 
;__Lib_EEPROM_1024.c,39 :: 		
0x00D2	0x0E55      	MOVLW       85
0x00D4	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_1024.c,40 :: 		
0x00D6	0x0EAA      	MOVLW       170
0x00D8	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_1024.c,41 :: 		
0x00DA	0x82A6      	BSF         EECON1, 1 
;__Lib_EEPROM_1024.c,44 :: 		
0x00DC	0xBE00      	BTFSC       R0, 7 
0x00DE	0xD002      	BRA         L__EEPROM_Write4
0x00E0	0x9EF2      	BCF         INTCON, 7 
0x00E2	0xD001      	BRA         L__EEPROM_Write5
L__EEPROM_Write4:
0x00E4	0x8EF2      	BSF         INTCON, 7 
L__EEPROM_Write5:
;__Lib_EEPROM_1024.c,46 :: 		
0x00E6	0x94A6      	BCF         EECON1, 2 
;__Lib_EEPROM_1024.c,48 :: 		
L_end_EEPROM_Write:
0x00E8	0x0012      	RETURN      0
; end of _EEPROM_Write
_SETFUN32:
;__Lib_MathDouble.c,144 :: 		
;__Lib_MathDouble.c,152 :: 		
0x00EA	0x840B      	BSF         R11, 2, 0
;__Lib_MathDouble.c,153 :: 		
0x00EC	0xAE0B      	BTFSS       R11, 7, 0
;__Lib_MathDouble.c,154 :: 		
0x00EE	0xF000EF80  	GOTO        SETFUN32EEE
;__Lib_MathDouble.c,156 :: 		
0x00F2	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,157 :: 		
0x00F4	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,158 :: 		
0x00F6	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,159 :: 		
0x00F8	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,160 :: 		
0x00FA	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,161 :: 		
0x00FC	0x360A      	RLCF        R10, 1, 0
;__Lib_MathDouble.c,162 :: 		
0x00FE	0x3202      	RRCF        R2, 1, 0
;__Lib_MathDouble.c,163 :: 		
SETFUN32EEE:
;__Lib_MathDouble.c,164 :: 		
0x0100	0x0EFF      	MOVLW       255
;__Lib_MathDouble.c,166 :: 		
L_end_SETFUN32:
0x0102	0x0012      	RETURN      0
; end of _SETFUN32
_____DoIFC:
;__Lib_System.c,93 :: 		
;__Lib_System.c,94 :: 		
0x0104	0x50F2      	MOVF        INTCON, 0, 0
;__Lib_System.c,95 :: 		
0x0106	0x6E02      	MOVWF       R2, 0
;__Lib_System.c,96 :: 		
0x0108	0x9EF2      	BCF         INTCON, 7 
;__Lib_System.c,97 :: 		
0x010A	0x0005      	PUSH
;__Lib_System.c,98 :: 		
0x010C	0x6AFF      	CLRF        TOSU, 0
;__Lib_System.c,99 :: 		
0x010E	0x5001      	MOVF        R1, 0, 0
;__Lib_System.c,100 :: 		
0x0110	0x6EFE      	MOVWF       TOSH, 0
;__Lib_System.c,101 :: 		
0x0112	0x5000      	MOVF        R0, 0, 0
;__Lib_System.c,102 :: 		
0x0114	0x6EFD      	MOVWF       TOSL, 0
;__Lib_System.c,103 :: 		
0x0116	0xBE02      	BTFSC       R2, 7, 0
;__Lib_System.c,104 :: 		
0x0118	0x8EF2      	BSF         INTCON, 7, 0
;__Lib_System.c,105 :: 		
;__Lib_System.c,107 :: 		
L_end_____DoIFC:
0x011A	0x0012      	RETURN      0
; end of _____DoIFC
_RES032:
;__Lib_MathDouble.c,128 :: 		
;__Lib_MathDouble.c,134 :: 		
0x011C	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,135 :: 		
0x011E	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,136 :: 		
0x0120	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,137 :: 		
0x0122	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,138 :: 		
0x0124	0x6A03      	CLRF        R3, 0
;__Lib_MathDouble.c,139 :: 		
0x0126	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,141 :: 		
L_end_RES032:
0x0128	0x0012      	RETURN      0
; end of _RES032
_FIXSIGN32:
;__Lib_MathDouble.c,117 :: 		
;__Lib_MathDouble.c,121 :: 		
0x012A	0xAE0A      	BTFSS       R10, 7, 0
;__Lib_MathDouble.c,122 :: 		
0x012C	0x9E02      	BCF         R2, 7, 0
;__Lib_MathDouble.c,123 :: 		
0x012E	0x0E00      	MOVLW       0
;__Lib_MathDouble.c,125 :: 		
L_end_FIXSIGN32:
0x0130	0x0012      	RETURN      0
; end of _FIXSIGN32
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x0132	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x0134	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x0136	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x0138	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x013A	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x013C	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x0140	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x0144	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x0146	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x0148	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x014C	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x0150	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x0152	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x0154	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x0156	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x0158	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x015A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x015C	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x015E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x0160	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x0162	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x0164	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x0166	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x0168	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x016A	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x016C	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x016E	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x0170	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x0174	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x0178	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x017C	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x0180	0x0012      	RETURN      0
; end of _Mul_16X16_U
_write_long:
;eeprom.c,18 :: 		void write_long(unsigned int addr, unsigned long int four_byte)
;eeprom.c,25 :: 		f_byte=four_byte&0xFF;
0x0182	0x0EFF      	MOVLW       255
0x0184	0x0101      	MOVLB       1
0x0186	0x155A      	ANDWF       FARG_write_long_four_byte, 0, 1
0x0188	0x6F5E      	MOVWF       write_long_f_byte_L0, 1
;eeprom.c,26 :: 		s_byte=(four_byte&0xFF00)>>8;
0x018A	0x0E00      	MOVLW       0
0x018C	0x155A      	ANDWF       FARG_write_long_four_byte, 0, 1
0x018E	0x6E05      	MOVWF       R5 
0x0190	0x0EFF      	MOVLW       255
0x0192	0x155B      	ANDWF       FARG_write_long_four_byte+1, 0, 1
0x0194	0x6E06      	MOVWF       R6 
0x0196	0xF007C15C  	MOVFF       FARG_write_long_four_byte+2, R7
0x019A	0xF008C15D  	MOVFF       FARG_write_long_four_byte+3, R8
0x019E	0x0E00      	MOVLW       0
0x01A0	0x1607      	ANDWF       R7, 1 
0x01A2	0x1608      	ANDWF       R8, 1 
0x01A4	0xF000C006  	MOVFF       R6, R0
0x01A8	0xF001C007  	MOVFF       R7, R1
0x01AC	0xF002C008  	MOVFF       R8, R2
0x01B0	0x6A03      	CLRF        R3 
0x01B2	0xF15FC000  	MOVFF       R0, write_long_s_byte_L0
;eeprom.c,27 :: 		t_byte=(four_byte&0xFF0000)>>16;
0x01B6	0x0E00      	MOVLW       0
0x01B8	0x155A      	ANDWF       FARG_write_long_four_byte, 0, 1
0x01BA	0x6E05      	MOVWF       R5 
0x01BC	0x0E00      	MOVLW       0
0x01BE	0x155B      	ANDWF       FARG_write_long_four_byte+1, 0, 1
0x01C0	0x6E06      	MOVWF       R6 
0x01C2	0x0EFF      	MOVLW       255
0x01C4	0x155C      	ANDWF       FARG_write_long_four_byte+2, 0, 1
0x01C6	0x6E07      	MOVWF       R7 
0x01C8	0x0E00      	MOVLW       0
0x01CA	0x155D      	ANDWF       FARG_write_long_four_byte+3, 0, 1
0x01CC	0x6E08      	MOVWF       R8 
0x01CE	0xF000C007  	MOVFF       R7, R0
0x01D2	0xF001C008  	MOVFF       R8, R1
0x01D6	0x6A02      	CLRF        R2 
0x01D8	0x6A03      	CLRF        R3 
0x01DA	0xF160C000  	MOVFF       R0, write_long_t_byte_L0
;eeprom.c,28 :: 		fth_byte=(four_byte&0xFF000000)>>24;
0x01DE	0x0E00      	MOVLW       0
0x01E0	0x155A      	ANDWF       FARG_write_long_four_byte, 0, 1
0x01E2	0x6E05      	MOVWF       R5 
0x01E4	0x0E00      	MOVLW       0
0x01E6	0x155B      	ANDWF       FARG_write_long_four_byte+1, 0, 1
0x01E8	0x6E06      	MOVWF       R6 
0x01EA	0x0E00      	MOVLW       0
0x01EC	0x155C      	ANDWF       FARG_write_long_four_byte+2, 0, 1
0x01EE	0x6E07      	MOVWF       R7 
0x01F0	0x0EFF      	MOVLW       255
0x01F2	0x155D      	ANDWF       FARG_write_long_four_byte+3, 0, 1
0x01F4	0x6E08      	MOVWF       R8 
0x01F6	0xF000C008  	MOVFF       R8, R0
0x01FA	0x6A01      	CLRF        R1 
0x01FC	0x6A02      	CLRF        R2 
0x01FE	0x6A03      	CLRF        R3 
;eeprom.c,30 :: 		EEPROM_Write (addr++,fth_byte);
0x0200	0xF161C158  	MOVFF       FARG_write_long_addr, FARG_EEPROM_Write_address
0x0204	0xF162C159  	MOVFF       FARG_write_long_addr+1, FARG_EEPROM_Write_address+1
0x0208	0xF163C000  	MOVFF       R0, FARG_EEPROM_Write_data_
0x020C	0xDF52      	RCALL       _EEPROM_Write
0x020E	0x0101      	MOVLB       1
0x0210	0x4B58      	INFSNZ      FARG_write_long_addr, 1, 1
0x0212	0x2B59      	INCF        FARG_write_long_addr+1, 1, 1
;eeprom.c,31 :: 		EEPROM_Write (addr++,t_byte);
0x0214	0xF161C158  	MOVFF       FARG_write_long_addr, FARG_EEPROM_Write_address
0x0218	0xF162C159  	MOVFF       FARG_write_long_addr+1, FARG_EEPROM_Write_address+1
0x021C	0xF163C160  	MOVFF       write_long_t_byte_L0, FARG_EEPROM_Write_data_
0x0220	0xDF48      	RCALL       _EEPROM_Write
0x0222	0x0101      	MOVLB       1
0x0224	0x4B58      	INFSNZ      FARG_write_long_addr, 1, 1
0x0226	0x2B59      	INCF        FARG_write_long_addr+1, 1, 1
;eeprom.c,32 :: 		EEPROM_Write (addr++,s_byte);
0x0228	0xF161C158  	MOVFF       FARG_write_long_addr, FARG_EEPROM_Write_address
0x022C	0xF162C159  	MOVFF       FARG_write_long_addr+1, FARG_EEPROM_Write_address+1
0x0230	0xF163C15F  	MOVFF       write_long_s_byte_L0, FARG_EEPROM_Write_data_
0x0234	0xDF3E      	RCALL       _EEPROM_Write
0x0236	0x0101      	MOVLB       1
0x0238	0x4B58      	INFSNZ      FARG_write_long_addr, 1, 1
0x023A	0x2B59      	INCF        FARG_write_long_addr+1, 1, 1
;eeprom.c,33 :: 		EEPROM_Write (addr,f_byte);
0x023C	0xF161C158  	MOVFF       FARG_write_long_addr, FARG_EEPROM_Write_address
0x0240	0xF162C159  	MOVFF       FARG_write_long_addr+1, FARG_EEPROM_Write_address+1
0x0244	0xF163C15E  	MOVFF       write_long_f_byte_L0, FARG_EEPROM_Write_data_
0x0248	0xDF34      	RCALL       _EEPROM_Write
;eeprom.c,34 :: 		}
L_end_write_long:
0x024A	0x0012      	RETURN      0
; end of _write_long
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x024C	0x0E03      	MOVLW       3
0x024E	0x6E0D      	MOVWF       R13, 0
L_Delay_1us0:
0x0250	0x2E0D      	DECFSZ      R13, 1, 0
0x0252	0xD7FE      	BRA         L_Delay_1us0
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x0254	0x0012      	RETURN      0
; end of _Delay_1us
_NRM3232:
;__Lib_MathDouble.c,455 :: 		
;__Lib_MathDouble.c,463 :: 		
0x0256	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,464 :: 		
0x0258	0x6A0E      	CLRF        R14, 0
;__Lib_MathDouble.c,465 :: 		
0x025A	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,466 :: 		
0x025C	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,467 :: 		
0x025E	0xF001EF44  	GOTO        NORM3232
;__Lib_MathDouble.c,468 :: 		
0x0262	0xF002C001  	MOVFF       R1, R2
;__Lib_MathDouble.c,469 :: 		
0x0266	0xF001C000  	MOVFF       R0, R1
;__Lib_MathDouble.c,470 :: 		
0x026A	0x6A00      	CLRF        R0, 0
;__Lib_MathDouble.c,471 :: 		
0x026C	0x860E      	BSF         R14, 3, 0
;__Lib_MathDouble.c,473 :: 		
0x026E	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,474 :: 		
0x0270	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,475 :: 		
0x0272	0xF001EF44  	GOTO        NORM3232
;__Lib_MathDouble.c,476 :: 		
0x0276	0xF002C001  	MOVFF       R1, R2
;__Lib_MathDouble.c,477 :: 		
0x027A	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,478 :: 		
0x027C	0x960E      	BCF         R14, 3, 0
;__Lib_MathDouble.c,479 :: 		
0x027E	0x880E      	BSF         R14, 4, 0
;__Lib_MathDouble.c,481 :: 		
0x0280	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,482 :: 		
0x0282	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,483 :: 		
0x0284	0xF001EF56  	GOTO        JPNRES032
;__Lib_MathDouble.c,484 :: 		
NORM3232:
;__Lib_MathDouble.c,485 :: 		
0x0288	0x500E      	MOVF        R14, 0, 0
;__Lib_MathDouble.c,486 :: 		
0x028A	0x5E03      	SUBWF       R3, 1, 0
;__Lib_MathDouble.c,487 :: 		
0x028C	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,488 :: 		
0x028E	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_MathDouble.c,489 :: 		
0x0290	0xF001EF5B  	GOTO        JPNSETFUN32
;__Lib_MathDouble.c,490 :: 		
0x0294	0x90D8      	BCF         STATUS, 0, 0
;__Lib_MathDouble.c,491 :: 		
NORM3232A:
;__Lib_MathDouble.c,492 :: 		
0x0296	0xBE02      	BTFSC       R2, 7, 0
;__Lib_MathDouble.c,493 :: 		
0x0298	0xF001EF60  	GOTO        JMPNFIXSIGN32
;__Lib_MathDouble.c,494 :: 		
0x029C	0x3600      	RLCF        R0, 1, 0
;__Lib_MathDouble.c,495 :: 		
0x029E	0x3601      	RLCF        R1, 1, 0
;__Lib_MathDouble.c,496 :: 		
0x02A0	0x3602      	RLCF        R2, 1, 0
;__Lib_MathDouble.c,497 :: 		
0x02A2	0x2E03      	DECFSZ      R3, 1, 0
;__Lib_MathDouble.c,498 :: 		
0x02A4	0xF001EF4B  	GOTO        NORM3232A
;__Lib_MathDouble.c,499 :: 		
0x02A8	0xF001EF5B  	GOTO        JPNSETFUN32
;__Lib_MathDouble.c,500 :: 		
JPNRES032:
;__Lib_MathDouble.c,501 :: 		
0x02AC	0x0E01      	MOVLW       1
;__Lib_MathDouble.c,502 :: 		
0x02AE	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,504 :: 		
0x02B0	0xDF35      	RCALL       _RES032
;__Lib_MathDouble.c,506 :: 		
0x02B2	0xF001EF63  	GOTO        NORM32EEE
;__Lib_MathDouble.c,507 :: 		
JPNSETFUN32:
;__Lib_MathDouble.c,508 :: 		
0x02B6	0x0E02      	MOVLW       2
;__Lib_MathDouble.c,509 :: 		
0x02B8	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,511 :: 		
0x02BA	0xDF17      	RCALL       _SETFUN32
;__Lib_MathDouble.c,513 :: 		
0x02BC	0xF001EF63  	GOTO        NORM32EEE
;__Lib_MathDouble.c,514 :: 		
JMPNFIXSIGN32:
;__Lib_MathDouble.c,515 :: 		
0x02C0	0x0E04      	MOVLW       4
;__Lib_MathDouble.c,516 :: 		
0x02C2	0x6E0C      	MOVWF       R12, 0
;__Lib_MathDouble.c,518 :: 		
0x02C4	0xDF32      	RCALL       _FIXSIGN32
;__Lib_MathDouble.c,520 :: 		
NORM32EEE:
;__Lib_MathDouble.c,527 :: 		
L_end_NRM3232:
0x02C6	0x0012      	RETURN      0
; end of _NRM3232
_read_long:
;eeprom.c,36 :: 		unsigned long int read_long(unsigned int addr)
;eeprom.c,38 :: 		unsigned long int res=0;
0x02C8	0x0101      	MOVLB       1
0x02CA	0x6B5A      	CLRF        read_long_res_L0, 1
0x02CC	0x6B5B      	CLRF        read_long_res_L0+1, 1
0x02CE	0x6B5C      	CLRF        read_long_res_L0+2, 1
0x02D0	0x6B5D      	CLRF        read_long_res_L0+3, 1
;eeprom.c,39 :: 		res+=(((unsigned long int)EEPROM_Read(addr++))<<24);
0x02D2	0xF161C158  	MOVFF       FARG_read_long_addr, FARG_EEPROM_Read_address
0x02D6	0xF162C159  	MOVFF       FARG_read_long_addr+1, FARG_EEPROM_Read_address+1
0x02DA	0xDEE1      	RCALL       _EEPROM_Read
0x02DC	0xF005C000  	MOVFF       R0, R5
0x02E0	0x0E00      	MOVLW       0
0x02E2	0x6E06      	MOVWF       R6 
0x02E4	0x6E07      	MOVWF       R7 
0x02E6	0x6E08      	MOVWF       R8 
0x02E8	0xF003C005  	MOVFF       R5, R3
0x02EC	0x6A00      	CLRF        R0 
0x02EE	0x6A01      	CLRF        R1 
0x02F0	0x6A02      	CLRF        R2 
0x02F2	0x5000      	MOVF        R0, 0 
0x02F4	0x275A      	ADDWF       read_long_res_L0, 1, 1
0x02F6	0x5001      	MOVF        R1, 0 
0x02F8	0x235B      	ADDWFC      read_long_res_L0+1, 1, 1
0x02FA	0x5002      	MOVF        R2, 0 
0x02FC	0x235C      	ADDWFC      read_long_res_L0+2, 1, 1
0x02FE	0x5003      	MOVF        R3, 0 
0x0300	0x235D      	ADDWFC      read_long_res_L0+3, 1, 1
0x0302	0x4B58      	INFSNZ      FARG_read_long_addr, 1, 1
0x0304	0x2B59      	INCF        FARG_read_long_addr+1, 1, 1
;eeprom.c,40 :: 		res+=(((unsigned long int)EEPROM_Read(addr++))<<16);
0x0306	0xF161C158  	MOVFF       FARG_read_long_addr, FARG_EEPROM_Read_address
0x030A	0xF162C159  	MOVFF       FARG_read_long_addr+1, FARG_EEPROM_Read_address+1
0x030E	0xDEC7      	RCALL       _EEPROM_Read
0x0310	0xF005C000  	MOVFF       R0, R5
0x0314	0x0E00      	MOVLW       0
0x0316	0x6E06      	MOVWF       R6 
0x0318	0x6E07      	MOVWF       R7 
0x031A	0x6E08      	MOVWF       R8 
0x031C	0xF003C006  	MOVFF       R6, R3
0x0320	0xF002C005  	MOVFF       R5, R2
0x0324	0x6A00      	CLRF        R0 
0x0326	0x6A01      	CLRF        R1 
0x0328	0x5000      	MOVF        R0, 0 
0x032A	0x275A      	ADDWF       read_long_res_L0, 1, 1
0x032C	0x5001      	MOVF        R1, 0 
0x032E	0x235B      	ADDWFC      read_long_res_L0+1, 1, 1
0x0330	0x5002      	MOVF        R2, 0 
0x0332	0x235C      	ADDWFC      read_long_res_L0+2, 1, 1
0x0334	0x5003      	MOVF        R3, 0 
0x0336	0x235D      	ADDWFC      read_long_res_L0+3, 1, 1
0x0338	0x4B58      	INFSNZ      FARG_read_long_addr, 1, 1
0x033A	0x2B59      	INCF        FARG_read_long_addr+1, 1, 1
;eeprom.c,41 :: 		res+=(((unsigned long int)EEPROM_Read(addr++))<<8);
0x033C	0xF161C158  	MOVFF       FARG_read_long_addr, FARG_EEPROM_Read_address
0x0340	0xF162C159  	MOVFF       FARG_read_long_addr+1, FARG_EEPROM_Read_address+1
0x0344	0xDEAC      	RCALL       _EEPROM_Read
0x0346	0xF005C000  	MOVFF       R0, R5
0x034A	0x0E00      	MOVLW       0
0x034C	0x6E06      	MOVWF       R6 
0x034E	0x6E07      	MOVWF       R7 
0x0350	0x6E08      	MOVWF       R8 
0x0352	0xF003C007  	MOVFF       R7, R3
0x0356	0xF002C006  	MOVFF       R6, R2
0x035A	0xF001C005  	MOVFF       R5, R1
0x035E	0x6A00      	CLRF        R0 
0x0360	0x5000      	MOVF        R0, 0 
0x0362	0x275A      	ADDWF       read_long_res_L0, 1, 1
0x0364	0x5001      	MOVF        R1, 0 
0x0366	0x235B      	ADDWFC      read_long_res_L0+1, 1, 1
0x0368	0x5002      	MOVF        R2, 0 
0x036A	0x235C      	ADDWFC      read_long_res_L0+2, 1, 1
0x036C	0x5003      	MOVF        R3, 0 
0x036E	0x235D      	ADDWFC      read_long_res_L0+3, 1, 1
0x0370	0x4B58      	INFSNZ      FARG_read_long_addr, 1, 1
0x0372	0x2B59      	INCF        FARG_read_long_addr+1, 1, 1
;eeprom.c,42 :: 		res+=(unsigned long int)EEPROM_Read(addr);
0x0374	0xF161C158  	MOVFF       FARG_read_long_addr, FARG_EEPROM_Read_address
0x0378	0xF162C159  	MOVFF       FARG_read_long_addr+1, FARG_EEPROM_Read_address+1
0x037C	0xDE90      	RCALL       _EEPROM_Read
0x037E	0x0E00      	MOVLW       0
0x0380	0x6E01      	MOVWF       R1 
0x0382	0x6E02      	MOVWF       R2 
0x0384	0x6E03      	MOVWF       R3 
0x0386	0x515A      	MOVF        read_long_res_L0, 0, 1
0x0388	0x2600      	ADDWF       R0, 1 
0x038A	0x515B      	MOVF        read_long_res_L0+1, 0, 1
0x038C	0x2201      	ADDWFC      R1, 1 
0x038E	0x515C      	MOVF        read_long_res_L0+2, 0, 1
0x0390	0x2202      	ADDWFC      R2, 1 
0x0392	0x515D      	MOVF        read_long_res_L0+3, 0, 1
0x0394	0x2203      	ADDWFC      R3, 1 
0x0396	0xF15AC000  	MOVFF       R0, read_long_res_L0
0x039A	0xF15BC001  	MOVFF       R1, read_long_res_L0+1
0x039E	0xF15CC002  	MOVFF       R2, read_long_res_L0+2
0x03A2	0xF15DC003  	MOVFF       R3, read_long_res_L0+3
;eeprom.c,43 :: 		return res;
;eeprom.c,44 :: 		}
L_end_read_long:
0x03A6	0x0012      	RETURN      0
; end of _read_long
_tx_prepare:
;rs485.c,91 :: 		void tx_prepare(char p0, char p1, char p2){
;rs485.c,92 :: 		slave_tx_dat[0]=p0; //msg 0
0x03A8	0xF064C158  	MOVFF       FARG_tx_prepare_p0, _slave_tx_dat
;rs485.c,93 :: 		slave_tx_dat[1]=p1; //msg 1
0x03AC	0xF065C159  	MOVFF       FARG_tx_prepare_p1, _slave_tx_dat+1
;rs485.c,94 :: 		slave_tx_dat[2]=p2; //msg 2
0x03B0	0xF066C15A  	MOVFF       FARG_tx_prepare_p2, _slave_tx_dat+2
;rs485.c,95 :: 		slave_tx_dat[3]=0; //datalen
0x03B4	0x6A67      	CLRF        _slave_tx_dat+3 
;rs485.c,96 :: 		slave_tx_dat[4]=0; //255 when message is received
0x03B6	0x6A68      	CLRF        _slave_tx_dat+4 
;rs485.c,97 :: 		slave_tx_dat[5]=0; //255 if error has occurred
0x03B8	0x6A69      	CLRF        _slave_tx_dat+5 
;rs485.c,98 :: 		slave_tx_dat[6]=0; //address of the Slave which sent the message
0x03BA	0x6A6A      	CLRF        _slave_tx_dat+6 
;rs485.c,99 :: 		}
L_end_tx_prepare:
0x03BC	0x0012      	RETURN      0
; end of _tx_prepare
_RS485Slave_Send:
;__Lib_RS485.c,190 :: 		
;__Lib_RS485.c,195 :: 		
0x03BE	0xF15EC057  	MOVFF       __Lib_RS485__sladdress, RS485Slave_Send_slave_address_L0
;__Lib_RS485.c,196 :: 		
0x03C2	0x5249      	MOVF        __Lib_RS485_specadr, 1 
0x03C4	0xE004      	BZ          L_RS485Slave_Send38
;__Lib_RS485.c,197 :: 		
0x03C6	0x0E01      	MOVLW       1
0x03C8	0x1857      	XORWF       __Lib_RS485__sladdress, 0 
0x03CA	0x0101      	MOVLB       1
0x03CC	0x6F5E      	MOVWF       RS485Slave_Send_slave_address_L0, 1
L_RS485Slave_Send38:
0x03CE	0x0101      	MOVLB       1
;__Lib_RS485.c,199 :: 		
0x03D0	0x8480      	BSF         rs485_rxtx_pin, BitPos(rs485_rxtx_pin+0) 
;__Lib_RS485.c,200 :: 		
0x03D2	0x055A      	DECF        FARG_RS485Slave_Send_datalen, 0, 1
0x03D4	0x6F5D      	MOVWF       RS485Slave_Send_len_L0, 1
;__Lib_RS485.c,201 :: 		
0x03D6	0xFFE1C04C  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x03DA	0xFFE2C04D  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x03DE	0x0E96      	MOVLW       150
0x03E0	0x6EE6      	MOVWF       POSTINC1 
0x03E2	0xF000C04A  	MOVFF       _UART_Wr_Ptr, R0
0x03E6	0xF001C04B  	MOVFF       _UART_Wr_Ptr+1, R1
0x03EA	0xDE8C      	RCALL       _____DoIFC
;__Lib_RS485.c,202 :: 		
0x03EC	0x0101      	MOVLB       1
0x03EE	0x515E      	MOVF        RS485Slave_Send_slave_address_L0, 0, 1
0x03F0	0x0A96      	XORLW       150
0x03F2	0xE004      	BZ          L__RS485Slave_Send109
0x03F4	0x515E      	MOVF        RS485Slave_Send_slave_address_L0, 0, 1
0x03F6	0x0AA9      	XORLW       169
0x03F8	0xE001      	BZ          L__RS485Slave_Send109
0x03FA	0xD002      	BRA         L_RS485Slave_Send41
L__RS485Slave_Send109:
;__Lib_RS485.c,203 :: 		
0x03FC	0x715E      	BTG         RS485Slave_Send_slave_address_L0, 0, 1
;__Lib_RS485.c,204 :: 		
0x03FE	0x8D5A      	BSF         FARG_RS485Slave_Send_datalen, 6, 1
;__Lib_RS485.c,205 :: 		
L_RS485Slave_Send41:
;__Lib_RS485.c,206 :: 		
0x0400	0xFFE1C04C  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x0404	0xFFE2C04D  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x0408	0xFFE6C15E  	MOVFF       RS485Slave_Send_slave_address_L0, POSTINC1
0x040C	0xF000C04A  	MOVFF       _UART_Wr_Ptr, R0
0x0410	0xF001C04B  	MOVFF       _UART_Wr_Ptr+1, R1
0x0414	0xDE77      	RCALL       _____DoIFC
;__Lib_RS485.c,207 :: 		
0x0416	0x0101      	MOVLB       1
0x0418	0x6B5B      	CLRF        RS485Slave_Send_i_L0, 1
L_RS485Slave_Send42:
0x041A	0x515B      	MOVF        RS485Slave_Send_i_L0, 0, 1
0x041C	0x5D5D      	SUBWF       RS485Slave_Send_len_L0, 0, 1
0x041E	0xE332      	BNC         L_RS485Slave_Send43
;__Lib_RS485.c,208 :: 		
0x0420	0x515B      	MOVF        RS485Slave_Send_i_L0, 0, 1
0x0422	0x2558      	ADDWF       FARG_RS485Slave_Send_data_buffer, 0, 1
0x0424	0x6EE9      	MOVWF       FSR0L 
0x0426	0x0E00      	MOVLW       0
0x0428	0x2159      	ADDWFC      FARG_RS485Slave_Send_data_buffer+1, 0, 1
0x042A	0x6EEA      	MOVWF       FSR0H 
0x042C	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0430	0xF15FC001  	MOVFF       R1, RS485Slave_Send_temp_L0
;__Lib_RS485.c,209 :: 		
0x0434	0x5001      	MOVF        R1, 0 
0x0436	0x0A96      	XORLW       150
0x0438	0xE004      	BZ          L__RS485Slave_Send108
0x043A	0x515F      	MOVF        RS485Slave_Send_temp_L0, 0, 1
0x043C	0x0AA9      	XORLW       169
0x043E	0xE001      	BZ          L__RS485Slave_Send108
0x0440	0xD01F      	BRA         L_RS485Slave_Send47
L__RS485Slave_Send108:
;__Lib_RS485.c,210 :: 		
0x0442	0x515B      	MOVF        RS485Slave_Send_i_L0, 0, 1
0x0444	0x2558      	ADDWF       FARG_RS485Slave_Send_data_buffer, 0, 1
0x0446	0x6E01      	MOVWF       R1 
0x0448	0x0E00      	MOVLW       0
0x044A	0x2159      	ADDWFC      FARG_RS485Slave_Send_data_buffer+1, 0, 1
0x044C	0x6E02      	MOVWF       R2 
0x044E	0xFFE9C001  	MOVFF       R1, FSR0L
0x0452	0xFFEAC002  	MOVFF       R2, FSR0H
0x0456	0x0E01      	MOVLW       1
0x0458	0x18EE      	XORWF       POSTINC0, 0 
0x045A	0x6E00      	MOVWF       R0 
0x045C	0xFFE1C001  	MOVFF       R1, FSR1L
0x0460	0xFFE2C002  	MOVFF       R2, FSR1H
0x0464	0xFFE6C000  	MOVFF       R0, POSTINC1
;__Lib_RS485.c,211 :: 		
0x0468	0xF001C15B  	MOVFF       RS485Slave_Send_i_L0, R1
0x046C	0x0E04      	MOVLW       4
0x046E	0x6E00      	MOVWF       R0 
0x0470	0x5001      	MOVF        R1, 0 
L__RS485Slave_Send120:
0x0472	0xE004      	BZ          L__RS485Slave_Send121
0x0474	0x3600      	RLCF        R0, 1 
0x0476	0x9000      	BCF         R0, 0 
0x0478	0x0FFF      	ADDLW       255
0x047A	0xD7FB      	BRA         L__RS485Slave_Send120
L__RS485Slave_Send121:
0x047C	0x5000      	MOVF        R0, 0 
0x047E	0x135A      	IORWF       FARG_RS485Slave_Send_datalen, 1, 1
;__Lib_RS485.c,212 :: 		
L_RS485Slave_Send47:
;__Lib_RS485.c,207 :: 		
0x0480	0x2B5B      	INCF        RS485Slave_Send_i_L0, 1, 1
;__Lib_RS485.c,213 :: 		
0x0482	0xD7CB      	BRA         L_RS485Slave_Send42
L_RS485Slave_Send43:
;__Lib_RS485.c,214 :: 		
0x0484	0xFFE1C04C  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x0488	0xFFE2C04D  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x048C	0xFFE6C15A  	MOVFF       FARG_RS485Slave_Send_datalen, POSTINC1
0x0490	0xF000C04A  	MOVFF       _UART_Wr_Ptr, R0
0x0494	0xF001C04B  	MOVFF       _UART_Wr_Ptr+1, R1
0x0498	0xDE35      	RCALL       _____DoIFC
;__Lib_RS485.c,215 :: 		
0x049A	0x0101      	MOVLB       1
0x049C	0x515E      	MOVF        RS485Slave_Send_slave_address_L0, 0, 1
0x049E	0x195A      	XORWF       FARG_RS485Slave_Send_datalen, 0, 1
0x04A0	0x6F5C      	MOVWF       RS485Slave_Send_crc_send_L0, 1
;__Lib_RS485.c,216 :: 		
0x04A2	0x6B5B      	CLRF        RS485Slave_Send_i_L0, 1
L_RS485Slave_Send48:
0x04A4	0x515B      	MOVF        RS485Slave_Send_i_L0, 0, 1
0x04A6	0x5D5D      	SUBWF       RS485Slave_Send_len_L0, 0, 1
0x04A8	0xE31E      	BNC         L_RS485Slave_Send49
;__Lib_RS485.c,217 :: 		
0x04AA	0x515B      	MOVF        RS485Slave_Send_i_L0, 0, 1
0x04AC	0x2558      	ADDWF       FARG_RS485Slave_Send_data_buffer, 0, 1
0x04AE	0x6E00      	MOVWF       R0 
0x04B0	0x0E00      	MOVLW       0
0x04B2	0x2159      	ADDWFC      FARG_RS485Slave_Send_data_buffer+1, 0, 1
0x04B4	0x6E01      	MOVWF       R1 
0x04B6	0xFFD9C000  	MOVFF       R0, FSR2L
0x04BA	0xFFDAC001  	MOVFF       R1, FSR2H
0x04BE	0x50DE      	MOVF        POSTINC2, 0 
0x04C0	0x1B5C      	XORWF       RS485Slave_Send_crc_send_L0, 1, 1
;__Lib_RS485.c,218 :: 		
0x04C2	0xFFE1C04C  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x04C6	0xFFE2C04D  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x04CA	0xFFE9C000  	MOVFF       R0, FSR0L
0x04CE	0xFFEAC001  	MOVFF       R1, FSR0H
0x04D2	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
0x04D6	0xF000C04A  	MOVFF       _UART_Wr_Ptr, R0
0x04DA	0xF001C04B  	MOVFF       _UART_Wr_Ptr+1, R1
0x04DE	0xDE12      	RCALL       _____DoIFC
;__Lib_RS485.c,216 :: 		
0x04E0	0x0101      	MOVLB       1
0x04E2	0x2B5B      	INCF        RS485Slave_Send_i_L0, 1, 1
;__Lib_RS485.c,219 :: 		
0x04E4	0xD7DF      	BRA         L_RS485Slave_Send48
L_RS485Slave_Send49:
;__Lib_RS485.c,221 :: 		
0x04E6	0x1D5C      	COMF        RS485Slave_Send_crc_send_L0, 0, 1
0x04E8	0x6E01      	MOVWF       R1 
0x04EA	0xF15CC001  	MOVFF       R1, RS485Slave_Send_crc_send_L0
;__Lib_RS485.c,222 :: 		
0x04EE	0x5001      	MOVF        R1, 0 
0x04F0	0x0A96      	XORLW       150
0x04F2	0xE004      	BZ          L__RS485Slave_Send107
0x04F4	0x515C      	MOVF        RS485Slave_Send_crc_send_L0, 0, 1
0x04F6	0x0AA9      	XORLW       169
0x04F8	0xE001      	BZ          L__RS485Slave_Send107
0x04FA	0xD001      	BRA         L_RS485Slave_Send53
L__RS485Slave_Send107:
;__Lib_RS485.c,223 :: 		
0x04FC	0x2B5C      	INCF        RS485Slave_Send_crc_send_L0, 1, 1
L_RS485Slave_Send53:
;__Lib_RS485.c,224 :: 		
0x04FE	0xFFE1C04C  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x0502	0xFFE2C04D  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x0506	0xFFE6C15C  	MOVFF       RS485Slave_Send_crc_send_L0, POSTINC1
0x050A	0xF000C04A  	MOVFF       _UART_Wr_Ptr, R0
0x050E	0xF001C04B  	MOVFF       _UART_Wr_Ptr+1, R1
0x0512	0xDDF8      	RCALL       _____DoIFC
;__Lib_RS485.c,225 :: 		
0x0514	0xFFE1C04C  	MOVFF       _UART_Wr_Ptr+2, FSR1L
0x0518	0xFFE2C04D  	MOVFF       _UART_Wr_Ptr+3, FSR1H
0x051C	0x0EA9      	MOVLW       169
0x051E	0x6EE6      	MOVWF       POSTINC1 
0x0520	0xF000C04A  	MOVFF       _UART_Wr_Ptr, R0
0x0524	0xF001C04B  	MOVFF       _UART_Wr_Ptr+1, R1
0x0528	0xDDED      	RCALL       _____DoIFC
;__Lib_RS485.c,227 :: 		
L_RS485Slave_Send54:
0x052A	0xF000C045  	MOVFF       _UART_Tx_Idle_Ptr, R0
0x052E	0xF001C046  	MOVFF       _UART_Tx_Idle_Ptr+1, R1
0x0532	0xDDE8      	RCALL       _____DoIFC
0x0534	0x5000      	MOVF        R0, 0 
0x0536	0x0A00      	XORLW       0
0x0538	0xE101      	BNZ         L_RS485Slave_Send55
;__Lib_RS485.c,228 :: 		
0x053A	0xD7F7      	BRA         L_RS485Slave_Send54
L_RS485Slave_Send55:
;__Lib_RS485.c,230 :: 		
0x053C	0x9480      	BCF         rs485_rxtx_pin, BitPos(rs485_rxtx_pin+0) 
;__Lib_RS485.c,231 :: 		
L_end_RS485Slave_Send:
0x053E	0x0012      	RETURN      0
; end of _RS485Slave_Send
_read_data:
;eeprom.c,11 :: 		void read_data(void){
;eeprom.c,12 :: 		ENTRAN=read_long(80);
0x0540	0x0E50      	MOVLW       80
0x0542	0x0101      	MOVLB       1
0x0544	0x6F58      	MOVWF       FARG_read_long_addr, 1
0x0546	0x0E00      	MOVLW       0
0x0548	0x6F59      	MOVWF       FARG_read_long_addr+1, 1
0x054A	0xDEBE      	RCALL       _read_long
0x054C	0xF02BC000  	MOVFF       R0, _ENTRAN
0x0550	0xF02CC001  	MOVFF       R1, _ENTRAN+1
0x0554	0xF02DC002  	MOVFF       R2, _ENTRAN+2
0x0558	0xF02EC003  	MOVFF       R3, _ENTRAN+3
;eeprom.c,13 :: 		SALEN=read_long(84);
0x055C	0x0E54      	MOVLW       84
0x055E	0x6F58      	MOVWF       FARG_read_long_addr, 1
0x0560	0x0E00      	MOVLW       0
0x0562	0x6F59      	MOVWF       FARG_read_long_addr+1, 1
0x0564	0xDEB1      	RCALL       _read_long
0x0566	0xF027C000  	MOVFF       R0, _SALEN
0x056A	0xF028C001  	MOVFF       R1, _SALEN+1
0x056E	0xF029C002  	MOVFF       R2, _SALEN+2
0x0572	0xF02AC003  	MOVFF       R3, _SALEN+3
;eeprom.c,14 :: 		BLOQUEOS=read_long(88);
0x0576	0x0E58      	MOVLW       88
0x0578	0x6F58      	MOVWF       FARG_read_long_addr, 1
0x057A	0x0E00      	MOVLW       0
0x057C	0x6F59      	MOVWF       FARG_read_long_addr+1, 1
0x057E	0xDEA4      	RCALL       _read_long
0x0580	0xF037C000  	MOVFF       R0, _BLOQUEOS
0x0584	0xF038C001  	MOVFF       R1, _BLOQUEOS+1
0x0588	0xF039C002  	MOVFF       R2, _BLOQUEOS+2
0x058C	0xF03AC003  	MOVFF       R3, _BLOQUEOS+3
;eeprom.c,15 :: 		Delay_ms(20);
0x0590	0x0E02      	MOVLW       2
0x0592	0x6E0B      	MOVWF       R11, 0
0x0594	0x0E04      	MOVLW       4
0x0596	0x6E0C      	MOVWF       R12, 0
0x0598	0x0EBA      	MOVLW       186
0x059A	0x6E0D      	MOVWF       R13, 0
L_read_data1:
0x059C	0x2E0D      	DECFSZ      R13, 1, 0
0x059E	0xD7FE      	BRA         L_read_data1
0x05A0	0x2E0C      	DECFSZ      R12, 1, 0
0x05A2	0xD7FC      	BRA         L_read_data1
0x05A4	0x2E0B      	DECFSZ      R11, 1, 0
0x05A6	0xD7FA      	BRA         L_read_data1
0x05A8	0x0000      	NOP
;eeprom.c,16 :: 		}
L_end_read_data:
0x05AA	0x0012      	RETURN      0
; end of _read_data
_save_data:
;eeprom.c,3 :: 		void save_data(void){
;eeprom.c,4 :: 		write_long(80,ENTRAN);
0x05AC	0x0E50      	MOVLW       80
0x05AE	0x0101      	MOVLB       1
0x05B0	0x6F58      	MOVWF       FARG_write_long_addr, 1
0x05B2	0x0E00      	MOVLW       0
0x05B4	0x6F59      	MOVWF       FARG_write_long_addr+1, 1
0x05B6	0xF15AC02B  	MOVFF       _ENTRAN, FARG_write_long_four_byte
0x05BA	0xF15BC02C  	MOVFF       _ENTRAN+1, FARG_write_long_four_byte+1
0x05BE	0xF15CC02D  	MOVFF       _ENTRAN+2, FARG_write_long_four_byte+2
0x05C2	0xF15DC02E  	MOVFF       _ENTRAN+3, FARG_write_long_four_byte+3
0x05C6	0xDDDD      	RCALL       _write_long
;eeprom.c,5 :: 		write_long(84,SALEN);
0x05C8	0x0E54      	MOVLW       84
0x05CA	0x0101      	MOVLB       1
0x05CC	0x6F58      	MOVWF       FARG_write_long_addr, 1
0x05CE	0x0E00      	MOVLW       0
0x05D0	0x6F59      	MOVWF       FARG_write_long_addr+1, 1
0x05D2	0xF15AC027  	MOVFF       _SALEN, FARG_write_long_four_byte
0x05D6	0xF15BC028  	MOVFF       _SALEN+1, FARG_write_long_four_byte+1
0x05DA	0xF15CC029  	MOVFF       _SALEN+2, FARG_write_long_four_byte+2
0x05DE	0xF15DC02A  	MOVFF       _SALEN+3, FARG_write_long_four_byte+3
0x05E2	0xDDCF      	RCALL       _write_long
;eeprom.c,6 :: 		write_long(88,BLOQUEOS);
0x05E4	0x0E58      	MOVLW       88
0x05E6	0x0101      	MOVLB       1
0x05E8	0x6F58      	MOVWF       FARG_write_long_addr, 1
0x05EA	0x0E00      	MOVLW       0
0x05EC	0x6F59      	MOVWF       FARG_write_long_addr+1, 1
0x05EE	0xF15AC037  	MOVFF       _BLOQUEOS, FARG_write_long_four_byte
0x05F2	0xF15BC038  	MOVFF       _BLOQUEOS+1, FARG_write_long_four_byte+1
0x05F6	0xF15CC039  	MOVFF       _BLOQUEOS+2, FARG_write_long_four_byte+2
0x05FA	0xF15DC03A  	MOVFF       _BLOQUEOS+3, FARG_write_long_four_byte+3
0x05FE	0xDDC1      	RCALL       _write_long
;eeprom.c,7 :: 		write_long(92,555);
0x0600	0x0E5C      	MOVLW       92
0x0602	0x0101      	MOVLB       1
0x0604	0x6F58      	MOVWF       FARG_write_long_addr, 1
0x0606	0x0E00      	MOVLW       0
0x0608	0x6F59      	MOVWF       FARG_write_long_addr+1, 1
0x060A	0x0E2B      	MOVLW       43
0x060C	0x6F5A      	MOVWF       FARG_write_long_four_byte, 1
0x060E	0x0E02      	MOVLW       2
0x0610	0x6F5B      	MOVWF       FARG_write_long_four_byte+1, 1
0x0612	0x0E00      	MOVLW       0
0x0614	0x6F5C      	MOVWF       FARG_write_long_four_byte+2, 1
0x0616	0x6F5D      	MOVWF       FARG_write_long_four_byte+3, 1
0x0618	0xDDB4      	RCALL       _write_long
;eeprom.c,8 :: 		Delay_ms(20);
0x061A	0x0E02      	MOVLW       2
0x061C	0x6E0B      	MOVWF       R11, 0
0x061E	0x0E04      	MOVLW       4
0x0620	0x6E0C      	MOVWF       R12, 0
0x0622	0x0EBA      	MOVLW       186
0x0624	0x6E0D      	MOVWF       R13, 0
L_save_data0:
0x0626	0x2E0D      	DECFSZ      R13, 1, 0
0x0628	0xD7FE      	BRA         L_save_data0
0x062A	0x2E0C      	DECFSZ      R12, 1, 0
0x062C	0xD7FC      	BRA         L_save_data0
0x062E	0x2E0B      	DECFSZ      R11, 1, 0
0x0630	0xD7FA      	BRA         L_save_data0
0x0632	0x0000      	NOP
;eeprom.c,9 :: 		}
L_end_save_data:
0x0634	0x0012      	RETURN      0
; end of _save_data
_rs485_slave_send:
;rs485.c,14 :: 		void rs485_slave_send(void){
;rs485.c,24 :: 		e0=ENTRAN&0xFF;
0x0636	0x0EFF      	MOVLW       255
0x0638	0x142B      	ANDWF       _ENTRAN, 0 
0x063A	0x0101      	MOVLB       1
0x063C	0x6F58      	MOVWF       FARG_tx_prepare_p0, 1
;rs485.c,25 :: 		e1=(ENTRAN&0xFF00)>>8;
0x063E	0x0E00      	MOVLW       0
0x0640	0x142B      	ANDWF       _ENTRAN, 0 
0x0642	0x6E01      	MOVWF       R1 
0x0644	0x0EFF      	MOVLW       255
0x0646	0x142C      	ANDWF       _ENTRAN+1, 0 
0x0648	0x6E02      	MOVWF       R2 
0x064A	0xF003C02D  	MOVFF       _ENTRAN+2, R3
0x064E	0xF004C02E  	MOVFF       _ENTRAN+3, R4
0x0652	0x0E00      	MOVLW       0
0x0654	0x1603      	ANDWF       R3, 1 
0x0656	0x1604      	ANDWF       R4, 1 
0x0658	0xF00DC002  	MOVFF       R2, R13
0x065C	0xF00EC003  	MOVFF       R3, R14
0x0660	0xF00FC004  	MOVFF       R4, R15
0x0664	0x6A10      	CLRF        R16 
;rs485.c,26 :: 		e2=(ENTRAN&0xFF0000)>>16;
0x0666	0x0E00      	MOVLW       0
0x0668	0x142B      	ANDWF       _ENTRAN, 0 
0x066A	0x6E01      	MOVWF       R1 
0x066C	0x0E00      	MOVLW       0
0x066E	0x142C      	ANDWF       _ENTRAN+1, 0 
0x0670	0x6E02      	MOVWF       R2 
0x0672	0x0EFF      	MOVLW       255
0x0674	0x142D      	ANDWF       _ENTRAN+2, 0 
0x0676	0x6E03      	MOVWF       R3 
0x0678	0x0E00      	MOVLW       0
0x067A	0x142E      	ANDWF       _ENTRAN+3, 0 
0x067C	0x6E04      	MOVWF       R4 
0x067E	0xF009C003  	MOVFF       R3, R9
0x0682	0xF00AC004  	MOVFF       R4, R10
0x0686	0x6A0B      	CLRF        R11 
0x0688	0x6A0C      	CLRF        R12 
;rs485.c,27 :: 		e3=(ENTRAN&0xFF000000)>>24;
0x068A	0x0E00      	MOVLW       0
0x068C	0x142B      	ANDWF       _ENTRAN, 0 
0x068E	0x6E05      	MOVWF       R5 
0x0690	0x0E00      	MOVLW       0
0x0692	0x142C      	ANDWF       _ENTRAN+1, 0 
0x0694	0x6E06      	MOVWF       R6 
0x0696	0x0E00      	MOVLW       0
0x0698	0x142D      	ANDWF       _ENTRAN+2, 0 
0x069A	0x6E07      	MOVWF       R7 
0x069C	0x0EFF      	MOVLW       255
0x069E	0x142E      	ANDWF       _ENTRAN+3, 0 
0x06A0	0x6E08      	MOVWF       R8 
0x06A2	0xF000C008  	MOVFF       R8, R0
0x06A6	0x6A01      	CLRF        R1 
0x06A8	0x6A02      	CLRF        R2 
0x06AA	0x6A03      	CLRF        R3 
0x06AC	0xF14FC000  	MOVFF       R0, rs485_slave_send_e3_L0
;rs485.c,29 :: 		s0=SALEN&0xFF;
0x06B0	0x0EFF      	MOVLW       255
0x06B2	0x1427      	ANDWF       _SALEN, 0 
0x06B4	0x6F50      	MOVWF       rs485_slave_send_s0_L0, 1
;rs485.c,30 :: 		s1=(SALEN&0xFF00)>>8;
0x06B6	0x0E00      	MOVLW       0
0x06B8	0x1427      	ANDWF       _SALEN, 0 
0x06BA	0x6E05      	MOVWF       R5 
0x06BC	0x0EFF      	MOVLW       255
0x06BE	0x1428      	ANDWF       _SALEN+1, 0 
0x06C0	0x6E06      	MOVWF       R6 
0x06C2	0xF007C029  	MOVFF       _SALEN+2, R7
0x06C6	0xF008C02A  	MOVFF       _SALEN+3, R8
0x06CA	0x0E00      	MOVLW       0
0x06CC	0x1607      	ANDWF       R7, 1 
0x06CE	0x1608      	ANDWF       R8, 1 
0x06D0	0xF000C006  	MOVFF       R6, R0
0x06D4	0xF001C007  	MOVFF       R7, R1
0x06D8	0xF002C008  	MOVFF       R8, R2
0x06DC	0x6A03      	CLRF        R3 
0x06DE	0xF151C000  	MOVFF       R0, rs485_slave_send_s1_L0
;rs485.c,31 :: 		s2=(SALEN&0xFF0000)>>16;
0x06E2	0x0E00      	MOVLW       0
0x06E4	0x1427      	ANDWF       _SALEN, 0 
0x06E6	0x6E05      	MOVWF       R5 
0x06E8	0x0E00      	MOVLW       0
0x06EA	0x1428      	ANDWF       _SALEN+1, 0 
0x06EC	0x6E06      	MOVWF       R6 
0x06EE	0x0EFF      	MOVLW       255
0x06F0	0x1429      	ANDWF       _SALEN+2, 0 
0x06F2	0x6E07      	MOVWF       R7 
0x06F4	0x0E00      	MOVLW       0
0x06F6	0x142A      	ANDWF       _SALEN+3, 0 
0x06F8	0x6E08      	MOVWF       R8 
0x06FA	0xF000C007  	MOVFF       R7, R0
0x06FE	0xF001C008  	MOVFF       R8, R1
0x0702	0x6A02      	CLRF        R2 
0x0704	0x6A03      	CLRF        R3 
0x0706	0xF152C000  	MOVFF       R0, rs485_slave_send_s2_L0
;rs485.c,32 :: 		s3=(SALEN&0xFF000000)>>24;
0x070A	0x0E00      	MOVLW       0
0x070C	0x1427      	ANDWF       _SALEN, 0 
0x070E	0x6E05      	MOVWF       R5 
0x0710	0x0E00      	MOVLW       0
0x0712	0x1428      	ANDWF       _SALEN+1, 0 
0x0714	0x6E06      	MOVWF       R6 
0x0716	0x0E00      	MOVLW       0
0x0718	0x1429      	ANDWF       _SALEN+2, 0 
0x071A	0x6E07      	MOVWF       R7 
0x071C	0x0EFF      	MOVLW       255
0x071E	0x142A      	ANDWF       _SALEN+3, 0 
0x0720	0x6E08      	MOVWF       R8 
0x0722	0xF000C008  	MOVFF       R8, R0
0x0726	0x6A01      	CLRF        R1 
0x0728	0x6A02      	CLRF        R2 
0x072A	0x6A03      	CLRF        R3 
0x072C	0xF153C000  	MOVFF       R0, rs485_slave_send_s3_L0
;rs485.c,34 :: 		b0=BLOQUEOS&0xFF;
0x0730	0x0EFF      	MOVLW       255
0x0732	0x1437      	ANDWF       _BLOQUEOS, 0 
0x0734	0x6F54      	MOVWF       rs485_slave_send_b0_L0, 1
;rs485.c,35 :: 		b1=(BLOQUEOS&0xFF00)>>8;
0x0736	0x0E00      	MOVLW       0
0x0738	0x1437      	ANDWF       _BLOQUEOS, 0 
0x073A	0x6E05      	MOVWF       R5 
0x073C	0x0EFF      	MOVLW       255
0x073E	0x1438      	ANDWF       _BLOQUEOS+1, 0 
0x0740	0x6E06      	MOVWF       R6 
0x0742	0xF007C039  	MOVFF       _BLOQUEOS+2, R7
0x0746	0xF008C03A  	MOVFF       _BLOQUEOS+3, R8
0x074A	0x0E00      	MOVLW       0
0x074C	0x1607      	ANDWF       R7, 1 
0x074E	0x1608      	ANDWF       R8, 1 
0x0750	0xF000C006  	MOVFF       R6, R0
0x0754	0xF001C007  	MOVFF       R7, R1
0x0758	0xF002C008  	MOVFF       R8, R2
0x075C	0x6A03      	CLRF        R3 
0x075E	0xF155C000  	MOVFF       R0, rs485_slave_send_b1_L0
;rs485.c,36 :: 		b2=(BLOQUEOS&0xFF0000)>>16;
0x0762	0x0E00      	MOVLW       0
0x0764	0x1437      	ANDWF       _BLOQUEOS, 0 
0x0766	0x6E05      	MOVWF       R5 
0x0768	0x0E00      	MOVLW       0
0x076A	0x1438      	ANDWF       _BLOQUEOS+1, 0 
0x076C	0x6E06      	MOVWF       R6 
0x076E	0x0EFF      	MOVLW       255
0x0770	0x1439      	ANDWF       _BLOQUEOS+2, 0 
0x0772	0x6E07      	MOVWF       R7 
0x0774	0x0E00      	MOVLW       0
0x0776	0x143A      	ANDWF       _BLOQUEOS+3, 0 
0x0778	0x6E08      	MOVWF       R8 
0x077A	0xF000C007  	MOVFF       R7, R0
0x077E	0xF001C008  	MOVFF       R8, R1
0x0782	0x6A02      	CLRF        R2 
0x0784	0x6A03      	CLRF        R3 
0x0786	0xF156C000  	MOVFF       R0, rs485_slave_send_b2_L0
;rs485.c,37 :: 		b3=(BLOQUEOS&0xFF000000)>>24;
0x078A	0x0E00      	MOVLW       0
0x078C	0x1437      	ANDWF       _BLOQUEOS, 0 
0x078E	0x6E05      	MOVWF       R5 
0x0790	0x0E00      	MOVLW       0
0x0792	0x1438      	ANDWF       _BLOQUEOS+1, 0 
0x0794	0x6E06      	MOVWF       R6 
0x0796	0x0E00      	MOVLW       0
0x0798	0x1439      	ANDWF       _BLOQUEOS+2, 0 
0x079A	0x6E07      	MOVWF       R7 
0x079C	0x0EFF      	MOVLW       255
0x079E	0x143A      	ANDWF       _BLOQUEOS+3, 0 
0x07A0	0x6E08      	MOVWF       R8 
0x07A2	0xF000C008  	MOVFF       R8, R0
0x07A6	0x6A01      	CLRF        R1 
0x07A8	0x6A02      	CLRF        R2 
0x07AA	0x6A03      	CLRF        R3 
0x07AC	0xF157C000  	MOVFF       R0, rs485_slave_send_b3_L0
;rs485.c,39 :: 		tx_prepare(e0,e1,e2);
0x07B0	0xF159C00D  	MOVFF       R13, FARG_tx_prepare_p1
0x07B4	0xF15AC009  	MOVFF       R9, FARG_tx_prepare_p2
0x07B8	0xDDF7      	RCALL       _tx_prepare
;rs485.c,40 :: 		RS485Slave_Send(slave_tx_dat,3); Delay_ms(20);     //tiempo cambiado de 3 a 2 ms
0x07BA	0x0E64      	MOVLW       _slave_tx_dat
0x07BC	0x6F58      	MOVWF       FARG_RS485Slave_Send_data_buffer, 1
0x07BE	0x0E00      	MOVLW       hi_addr(_slave_tx_dat)
0x07C0	0x6F59      	MOVWF       FARG_RS485Slave_Send_data_buffer+1, 1
0x07C2	0x0E03      	MOVLW       3
0x07C4	0x6F5A      	MOVWF       FARG_RS485Slave_Send_datalen, 1
0x07C6	0xDDFB      	RCALL       _RS485Slave_Send
0x07C8	0x0E02      	MOVLW       2
0x07CA	0x6E0B      	MOVWF       R11, 0
0x07CC	0x0E04      	MOVLW       4
0x07CE	0x6E0C      	MOVWF       R12, 0
0x07D0	0x0EBA      	MOVLW       186
0x07D2	0x6E0D      	MOVWF       R13, 0
L_rs485_slave_send0:
0x07D4	0x2E0D      	DECFSZ      R13, 1, 0
0x07D6	0xD7FE      	BRA         L_rs485_slave_send0
0x07D8	0x2E0C      	DECFSZ      R12, 1, 0
0x07DA	0xD7FC      	BRA         L_rs485_slave_send0
0x07DC	0x2E0B      	DECFSZ      R11, 1, 0
0x07DE	0xD7FA      	BRA         L_rs485_slave_send0
0x07E0	0x0000      	NOP
;rs485.c,41 :: 		tx_prepare(e3,s0,s1);
0x07E2	0xF158C14F  	MOVFF       rs485_slave_send_e3_L0, FARG_tx_prepare_p0
0x07E6	0xF159C150  	MOVFF       rs485_slave_send_s0_L0, FARG_tx_prepare_p1
0x07EA	0xF15AC151  	MOVFF       rs485_slave_send_s1_L0, FARG_tx_prepare_p2
0x07EE	0xDDDC      	RCALL       _tx_prepare
;rs485.c,42 :: 		RS485Slave_Send(slave_tx_dat,3); Delay_ms(20);
0x07F0	0x0E64      	MOVLW       _slave_tx_dat
0x07F2	0x0101      	MOVLB       1
0x07F4	0x6F58      	MOVWF       FARG_RS485Slave_Send_data_buffer, 1
0x07F6	0x0E00      	MOVLW       hi_addr(_slave_tx_dat)
0x07F8	0x6F59      	MOVWF       FARG_RS485Slave_Send_data_buffer+1, 1
0x07FA	0x0E03      	MOVLW       3
0x07FC	0x6F5A      	MOVWF       FARG_RS485Slave_Send_datalen, 1
0x07FE	0xDDDF      	RCALL       _RS485Slave_Send
0x0800	0x0E02      	MOVLW       2
0x0802	0x6E0B      	MOVWF       R11, 0
0x0804	0x0E04      	MOVLW       4
0x0806	0x6E0C      	MOVWF       R12, 0
0x0808	0x0EBA      	MOVLW       186
0x080A	0x6E0D      	MOVWF       R13, 0
L_rs485_slave_send1:
0x080C	0x2E0D      	DECFSZ      R13, 1, 0
0x080E	0xD7FE      	BRA         L_rs485_slave_send1
0x0810	0x2E0C      	DECFSZ      R12, 1, 0
0x0812	0xD7FC      	BRA         L_rs485_slave_send1
0x0814	0x2E0B      	DECFSZ      R11, 1, 0
0x0816	0xD7FA      	BRA         L_rs485_slave_send1
0x0818	0x0000      	NOP
;rs485.c,43 :: 		tx_prepare(s2,s3,b0);
0x081A	0xF158C152  	MOVFF       rs485_slave_send_s2_L0, FARG_tx_prepare_p0
0x081E	0xF159C153  	MOVFF       rs485_slave_send_s3_L0, FARG_tx_prepare_p1
0x0822	0xF15AC154  	MOVFF       rs485_slave_send_b0_L0, FARG_tx_prepare_p2
0x0826	0xDDC0      	RCALL       _tx_prepare
;rs485.c,44 :: 		RS485Slave_Send(slave_tx_dat,3); Delay_ms(20);
0x0828	0x0E64      	MOVLW       _slave_tx_dat
0x082A	0x0101      	MOVLB       1
0x082C	0x6F58      	MOVWF       FARG_RS485Slave_Send_data_buffer, 1
0x082E	0x0E00      	MOVLW       hi_addr(_slave_tx_dat)
0x0830	0x6F59      	MOVWF       FARG_RS485Slave_Send_data_buffer+1, 1
0x0832	0x0E03      	MOVLW       3
0x0834	0x6F5A      	MOVWF       FARG_RS485Slave_Send_datalen, 1
0x0836	0xDDC3      	RCALL       _RS485Slave_Send
0x0838	0x0E02      	MOVLW       2
0x083A	0x6E0B      	MOVWF       R11, 0
0x083C	0x0E04      	MOVLW       4
0x083E	0x6E0C      	MOVWF       R12, 0
0x0840	0x0EBA      	MOVLW       186
0x0842	0x6E0D      	MOVWF       R13, 0
L_rs485_slave_send2:
0x0844	0x2E0D      	DECFSZ      R13, 1, 0
0x0846	0xD7FE      	BRA         L_rs485_slave_send2
0x0848	0x2E0C      	DECFSZ      R12, 1, 0
0x084A	0xD7FC      	BRA         L_rs485_slave_send2
0x084C	0x2E0B      	DECFSZ      R11, 1, 0
0x084E	0xD7FA      	BRA         L_rs485_slave_send2
0x0850	0x0000      	NOP
;rs485.c,45 :: 		tx_prepare(b1,b2,b3);
0x0852	0xF158C155  	MOVFF       rs485_slave_send_b1_L0, FARG_tx_prepare_p0
0x0856	0xF159C156  	MOVFF       rs485_slave_send_b2_L0, FARG_tx_prepare_p1
0x085A	0xF15AC157  	MOVFF       rs485_slave_send_b3_L0, FARG_tx_prepare_p2
0x085E	0xDDA4      	RCALL       _tx_prepare
;rs485.c,46 :: 		RS485Slave_Send(slave_tx_dat,3); Delay_ms(20);
0x0860	0x0E64      	MOVLW       _slave_tx_dat
0x0862	0x0101      	MOVLB       1
0x0864	0x6F58      	MOVWF       FARG_RS485Slave_Send_data_buffer, 1
0x0866	0x0E00      	MOVLW       hi_addr(_slave_tx_dat)
0x0868	0x6F59      	MOVWF       FARG_RS485Slave_Send_data_buffer+1, 1
0x086A	0x0E03      	MOVLW       3
0x086C	0x6F5A      	MOVWF       FARG_RS485Slave_Send_datalen, 1
0x086E	0xDDA7      	RCALL       _RS485Slave_Send
0x0870	0x0E02      	MOVLW       2
0x0872	0x6E0B      	MOVWF       R11, 0
0x0874	0x0E04      	MOVLW       4
0x0876	0x6E0C      	MOVWF       R12, 0
0x0878	0x0EBA      	MOVLW       186
0x087A	0x6E0D      	MOVWF       R13, 0
L_rs485_slave_send3:
0x087C	0x2E0D      	DECFSZ      R13, 1, 0
0x087E	0xD7FE      	BRA         L_rs485_slave_send3
0x0880	0x2E0C      	DECFSZ      R12, 1, 0
0x0882	0xD7FC      	BRA         L_rs485_slave_send3
0x0884	0x2E0B      	DECFSZ      R11, 1, 0
0x0886	0xD7FA      	BRA         L_rs485_slave_send3
0x0888	0x0000      	NOP
;rs485.c,62 :: 		}
L_end_rs485_slave_send:
0x088A	0x0012      	RETURN      0
; end of _rs485_slave_send
_init_led:
;setup.c,114 :: 		void init_led(void){
;setup.c,115 :: 		BUZZER = 1; //ADD PC
0x088C	0x8A83      	BSF         PORTD, 5 
;setup.c,116 :: 		LED_V = 1;
0x088E	0x8084      	BSF         PORTE, 0 
;setup.c,117 :: 		LED_A = 0;
0x0890	0x9A82      	BCF         PORTC, 5 
;setup.c,118 :: 		LED_R = 0;
0x0892	0x9A80      	BCF         PORTA, 5 
;setup.c,120 :: 		Delay_ms(500);
0x0894	0x0E1A      	MOVLW       26
0x0896	0x6E0B      	MOVWF       R11, 0
0x0898	0x0E5E      	MOVLW       94
0x089A	0x6E0C      	MOVWF       R12, 0
0x089C	0x0E6E      	MOVLW       110
0x089E	0x6E0D      	MOVWF       R13, 0
L_init_led3:
0x08A0	0x2E0D      	DECFSZ      R13, 1, 0
0x08A2	0xD7FE      	BRA         L_init_led3
0x08A4	0x2E0C      	DECFSZ      R12, 1, 0
0x08A6	0xD7FC      	BRA         L_init_led3
0x08A8	0x2E0B      	DECFSZ      R11, 1, 0
0x08AA	0xD7FA      	BRA         L_init_led3
0x08AC	0x0000      	NOP
;setup.c,122 :: 		LED_V = 0;
0x08AE	0x9084      	BCF         PORTE, 0 
;setup.c,123 :: 		LED_A = 1;
0x08B0	0x8A82      	BSF         PORTC, 5 
;setup.c,124 :: 		LED_R = 0;
0x08B2	0x9A80      	BCF         PORTA, 5 
;setup.c,126 :: 		Delay_ms(500);
0x08B4	0x0E1A      	MOVLW       26
0x08B6	0x6E0B      	MOVWF       R11, 0
0x08B8	0x0E5E      	MOVLW       94
0x08BA	0x6E0C      	MOVWF       R12, 0
0x08BC	0x0E6E      	MOVLW       110
0x08BE	0x6E0D      	MOVWF       R13, 0
L_init_led4:
0x08C0	0x2E0D      	DECFSZ      R13, 1, 0
0x08C2	0xD7FE      	BRA         L_init_led4
0x08C4	0x2E0C      	DECFSZ      R12, 1, 0
0x08C6	0xD7FC      	BRA         L_init_led4
0x08C8	0x2E0B      	DECFSZ      R11, 1, 0
0x08CA	0xD7FA      	BRA         L_init_led4
0x08CC	0x0000      	NOP
;setup.c,128 :: 		LED_V = 0;
0x08CE	0x9084      	BCF         PORTE, 0 
;setup.c,129 :: 		LED_A = 0;
0x08D0	0x9A82      	BCF         PORTC, 5 
;setup.c,130 :: 		LED_R = 1;
0x08D2	0x8A80      	BSF         PORTA, 5 
;setup.c,132 :: 		Delay_ms(500);
0x08D4	0x0E1A      	MOVLW       26
0x08D6	0x6E0B      	MOVWF       R11, 0
0x08D8	0x0E5E      	MOVLW       94
0x08DA	0x6E0C      	MOVWF       R12, 0
0x08DC	0x0E6E      	MOVLW       110
0x08DE	0x6E0D      	MOVWF       R13, 0
L_init_led5:
0x08E0	0x2E0D      	DECFSZ      R13, 1, 0
0x08E2	0xD7FE      	BRA         L_init_led5
0x08E4	0x2E0C      	DECFSZ      R12, 1, 0
0x08E6	0xD7FC      	BRA         L_init_led5
0x08E8	0x2E0B      	DECFSZ      R11, 1, 0
0x08EA	0xD7FA      	BRA         L_init_led5
0x08EC	0x0000      	NOP
;setup.c,134 :: 		LED_V = 1;
0x08EE	0x8084      	BSF         PORTE, 0 
;setup.c,135 :: 		LED_A = 1;
0x08F0	0x8A82      	BSF         PORTC, 5 
;setup.c,136 :: 		LED_R = 1;
0x08F2	0x8A80      	BSF         PORTA, 5 
;setup.c,138 :: 		}
L_end_init_led:
0x08F4	0x0012      	RETURN      0
; end of _init_led
_word2double:
;__Lib_MathDouble.c,2335 :: 		
;__Lib_MathDouble.c,2344 :: 		
0x08F6	0x5000      	MOVF        R0, 0, 0
;__Lib_MathDouble.c,2345 :: 		
0x08F8	0x6E08      	MOVWF       R8, 0
;__Lib_MathDouble.c,2346 :: 		
0x08FA	0x5001      	MOVF        R1, 0, 0
;__Lib_MathDouble.c,2347 :: 		
0x08FC	0x6E00      	MOVWF       R0, 0
;__Lib_MathDouble.c,2348 :: 		
0x08FE	0x6A01      	CLRF        R1, 0
;__Lib_MathDouble.c,2349 :: 		
0x0900	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2350 :: 		
0x0902	0x6A03      	CLRF        R3, 0
;__Lib_MathDouble.c,2353 :: 		
0x0904	0x6A0B      	CLRF        R11, 0
;__Lib_MathDouble.c,2354 :: 		
0x0906	0x6A0C      	CLRF        R12, 0
;__Lib_MathDouble.c,2356 :: 		
0x0908	0x0E96      	MOVLW       150
;__Lib_MathDouble.c,2357 :: 		
0x090A	0x6E03      	MOVWF       R3, 0
;__Lib_MathDouble.c,2358 :: 		
0x090C	0x6A0A      	CLRF        R10, 0
;__Lib_MathDouble.c,2360 :: 		
0x090E	0xF001C000  	MOVFF       R0, R1
;__Lib_MathDouble.c,2361 :: 		
0x0912	0xF000C008  	MOVFF       R8, R0
;__Lib_MathDouble.c,2362 :: 		
0x0916	0x6A08      	CLRF        R8, 0
;__Lib_MathDouble.c,2363 :: 		
0x0918	0x6A02      	CLRF        R2, 0
;__Lib_MathDouble.c,2365 :: 		
0x091A	0xDC9D      	RCALL       _NRM3232
;__Lib_MathDouble.c,2366 :: 		
L_end_word2double:
0x091C	0x0012      	RETURN      0
; end of _word2double
_PWM1_Init:
;__Lib_PWM_c21.c,36 :: 		
;__Lib_PWM_c21.c,37 :: 		
;__Lib_PWM_c21.c,38 :: 		
0x091E	0x6ABE      	CLRF        CCPR1L 
;__Lib_PWM_c21.c,39 :: 		
0x0920	0x98BD      	BCF         CCP1CON, 4 
;__Lib_PWM_c21.c,40 :: 		
0x0922	0x9ABD      	BCF         CCP1CON, 5 
;__Lib_PWM_c21.c,41 :: 		
L_end_PWM1_Init:
0x0924	0x0012      	RETURN      0
; end of _PWM1_Init
_PWM1_Start:
;__Lib_PWM_c21.c,54 :: 		
;__Lib_PWM_c21.c,55 :: 		
0x0926	0x9494      	BCF         TRISC2_bit, BitPos(TRISC2_bit+0) 
;__Lib_PWM_c21.c,56 :: 		
0x0928	0x84CA      	BSF         T2CON, 2 
;__Lib_PWM_c21.c,57 :: 		
0x092A	0x0E0C      	MOVLW       12
0x092C	0x12BD      	IORWF       CCP1CON, 1 
;__Lib_PWM_c21.c,58 :: 		
L_end_PWM1_Start:
0x092E	0x0012      	RETURN      0
; end of _PWM1_Start
_logB_reset:
;log.c,64 :: 		void logB_reset(){
;log.c,66 :: 		for(jj=0; jj<logBindex;jj++){
0x0930	0x6A01      	CLRF        R1 
L_logB_reset23:
0x0932	0x0E80      	MOVLW       128
0x0934	0xBE01      	BTFSC       R1, 7 
0x0936	0x0E7F      	MOVLW       127
0x0938	0x6E00      	MOVWF       R0 
0x093A	0x0E80      	MOVLW       128
0x093C	0x5C00      	SUBWF       R0, 0 
0x093E	0xE103      	BNZ         L__logB_reset60
0x0940	0x0101      	MOVLB       1
0x0942	0x5135      	MOVF        _logBindex, 0, 1
0x0944	0x5C01      	SUBWF       R1, 0 
L__logB_reset60:
0x0946	0xE20D      	BC          L_logB_reset24
;log.c,67 :: 		logB[jj]=0;
0x0948	0x0E6D      	MOVLW       _logB
0x094A	0x6EE1      	MOVWF       FSR1L 
0x094C	0x0E00      	MOVLW       hi_addr(_logB)
0x094E	0x6EE2      	MOVWF       FSR1H 
0x0950	0x5001      	MOVF        R1, 0 
0x0952	0x26E1      	ADDWF       FSR1L, 1 
0x0954	0x0E00      	MOVLW       0
0x0956	0xBE01      	BTFSC       R1, 7 
0x0958	0x0EFF      	MOVLW       255
0x095A	0x22E2      	ADDWFC      FSR1H, 1 
0x095C	0x6AE6      	CLRF        POSTINC1 
;log.c,66 :: 		for(jj=0; jj<logBindex;jj++){
0x095E	0x2A01      	INCF        R1, 1 
;log.c,68 :: 		}
0x0960	0xD7E8      	BRA         L_logB_reset23
L_logB_reset24:
0x0962	0x0101      	MOVLB       1
;log.c,69 :: 		logBindex=0;
0x0964	0x6B35      	CLRF        _logBindex, 1
;log.c,70 :: 		Bpm=-1; Bpn=-1; Bpx=-1; Bpy=-1;
0x0966	0x0EFF      	MOVLW       255
0x0968	0x6E21      	MOVWF       _Bpm 
0x096A	0x0EFF      	MOVLW       255
0x096C	0x6E1F      	MOVWF       _Bpn 
0x096E	0x0EFF      	MOVLW       255
0x0970	0x6E1D      	MOVWF       _Bpx 
0x0972	0x0EFF      	MOVLW       255
0x0974	0x6E1E      	MOVWF       _Bpy 
;log.c,71 :: 		}
L_end_logB_reset:
0x0976	0x0012      	RETURN      0
; end of _logB_reset
_PWM1_Set_Duty:
;__Lib_PWM_c21.c,43 :: 		
;__Lib_PWM_c21.c,47 :: 		
0x0978	0x50CB      	MOVF        PR2, 0 
0x097A	0x0F01      	ADDLW       1
0x097C	0x6E00      	MOVWF       R0 
0x097E	0x6A01      	CLRF        R1 
0x0980	0x0E00      	MOVLW       0
0x0982	0x2201      	ADDWFC      R1, 1 
0x0984	0xF004C14F  	MOVFF       FARG_PWM1_Set_Duty_new_duty, R4
0x0988	0x0E00      	MOVLW       0
0x098A	0x6E05      	MOVWF       R5 
0x098C	0xF000EC99  	CALL        _Mul_16X16_U, 0
0x0990	0x0E06      	MOVLW       6
0x0992	0x6E02      	MOVWF       R2 
0x0994	0xF004C000  	MOVFF       R0, R4
0x0998	0xF005C001  	MOVFF       R1, R5
0x099C	0x5002      	MOVF        R2, 0 
L__PWM1_Set_Duty10:
0x099E	0xE005      	BZ          L__PWM1_Set_Duty11
0x09A0	0x3205      	RRCF        R5, 1 
0x09A2	0x3204      	RRCF        R4, 1 
0x09A4	0x9E05      	BCF         R5, 7 
0x09A6	0x0FFF      	ADDLW       255
0x09A8	0xD7FA      	BRA         L__PWM1_Set_Duty10
L__PWM1_Set_Duty11:
;__Lib_PWM_c21.c,48 :: 		
0x09AA	0x0E04      	MOVLW       4
0x09AC	0x6E01      	MOVWF       R1 
0x09AE	0xF000C004  	MOVFF       R4, R0
0x09B2	0x5001      	MOVF        R1, 0 
L__PWM1_Set_Duty12:
0x09B4	0xE004      	BZ          L__PWM1_Set_Duty13
0x09B6	0x3600      	RLCF        R0, 1 
0x09B8	0x9000      	BCF         R0, 0 
0x09BA	0x0FFF      	ADDLW       255
0x09BC	0xD7FB      	BRA         L__PWM1_Set_Duty12
L__PWM1_Set_Duty13:
0x09BE	0x0E30      	MOVLW       48
0x09C0	0x1400      	ANDWF       R0, 0 
0x09C2	0x6E03      	MOVWF       R3 
;__Lib_PWM_c21.c,49 :: 		
0x09C4	0xF000C004  	MOVFF       R4, R0
0x09C8	0xF001C005  	MOVFF       R5, R1
0x09CC	0x3201      	RRCF        R1, 1 
0x09CE	0x3200      	RRCF        R0, 1 
0x09D0	0x9E01      	BCF         R1, 7 
0x09D2	0x3201      	RRCF        R1, 1 
0x09D4	0x3200      	RRCF        R0, 1 
0x09D6	0x9E01      	BCF         R1, 7 
0x09D8	0xFFBEC000  	MOVFF       R0, CCPR1L
;__Lib_PWM_c21.c,50 :: 		
0x09DC	0x0E0F      	MOVLW       15
0x09DE	0x16BD      	ANDWF       CCP1CON, 1 
;__Lib_PWM_c21.c,51 :: 		
0x09E0	0x5003      	MOVF        R3, 0 
0x09E2	0x12BD      	IORWF       CCP1CON, 1 
;__Lib_PWM_c21.c,52 :: 		
L_end_PWM1_Set_Duty:
0x09E4	0x0012      	RETURN      0
; end of _PWM1_Set_Duty
_SUart0_Write:
;pic_swuart.h,45 :: 		
;pic_swuart.h,47 :: 		
0x09E6	0x8280      	BSF         Stx0_pin, BitPos(Stx0_pin+0) 
;pic_swuart.h,48 :: 		
0x09E8	0xDC31      	RCALL       _Delay_1us
;pic_swuart.h,49 :: 		
0x09EA	0x0E0B      	MOVLW       11
0x09EC	0x6E00      	MOVWF       R0 
;pic_swuart.h,50 :: 		
0x09EE	0xD00D      	BRA         ___SUart0_Write_st
;pic_swuart.h,64 :: 		
L_SUart0_Write0:
;pic_swuart.h,65 :: 		
0x09F0	0x0EA9      	MOVLW       169
0x09F2	0x6E02      	MOVWF       R2 
0x09F4	0x2E02      	DECFSZ      R2, 1, 0
0x09F6	0xD7FE      	BRA         $-2
0x09F8	0x0000      	NOP
;pic_swuart.h,66 :: 		
0x09FA	0x0101      	MOVLB       1
0x09FC	0x334F      	RRCF        FARG_SUart0_Write_tch, 1, 1
0x09FE	0x9F4F      	BCF         FARG_SUart0_Write_tch, 7, 1
;pic_swuart.h,67 :: 		
0x0A00	0x8F4F      	BSF         FARG_SUart0_Write_tch, 7, 1
;pic_swuart.h,68 :: 		
0x0A02	0xA0D8      	BTFSS       C_bit, BitPos(C_bit+0) 
0x0A04	0xD002      	BRA         L_SUart0_Write3
;pic_swuart.h,69 :: 		
0x0A06	0x8280      	BSF         Stx0_pin, BitPos(Stx0_pin+0) 
0x0A08	0xD002      	BRA         L_SUart0_Write4
L_SUart0_Write3:
;pic_swuart.h,71 :: 		
___SUart0_Write_st:
;pic_swuart.h,72 :: 		
0x0A0A	0x9280      	BCF         Stx0_pin, BitPos(Stx0_pin+0) 
;pic_swuart.h,73 :: 		
0x0A0C	0x0000      	NOP
;pic_swuart.h,74 :: 		
L_SUart0_Write4:
;pic_swuart.h,75 :: 		
0x0A0E	0x0600      	DECF        R0, 1 
0x0A10	0x5200      	MOVF        R0, 1 
0x0A12	0xE1EE      	BNZ         L_SUart0_Write0
;pic_swuart.h,76 :: 		
L_end_SUart0_Write:
0x0A14	0x0012      	RETURN      0
; end of _SUart0_Write
_Equals_Double:
;__Lib_MathDouble.c,2469 :: 		
;__Lib_MathDouble.c,2478 :: 		
0x0A16	0x5003      	MOVF        R3, 0, 0
;__Lib_MathDouble.c,2479 :: 		
0x0A18	0x1807      	XORWF       R7, 0, 0
;__Lib_MathDouble.c,2480 :: 		
0x0A1A	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,2481 :: 		
0x0A1C	0xF005EF1F  	GOTO        EQU_FALSE
;__Lib_MathDouble.c,2483 :: 		
0x0A20	0x5002      	MOVF        R2, 0, 0
;__Lib_MathDouble.c,2484 :: 		
0x0A22	0x1806      	XORWF       R6, 0, 0
;__Lib_MathDouble.c,2485 :: 		
0x0A24	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,2486 :: 		
0x0A26	0xF005EF1F  	GOTO        EQU_FALSE
;__Lib_MathDouble.c,2488 :: 		
0x0A2A	0x5001      	MOVF        R1, 0, 0
;__Lib_MathDouble.c,2489 :: 		
0x0A2C	0x1805      	XORWF       R5, 0, 0
;__Lib_MathDouble.c,2490 :: 		
0x0A2E	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_MathDouble.c,2491 :: 		
0x0A30	0xF005EF1F  	GOTO        EQU_FALSE
;__Lib_MathDouble.c,2493 :: 		
0x0A34	0x5000      	MOVF        R0, 0, 0
;__Lib_MathDouble.c,2494 :: 		
0x0A36	0x1804      	XORWF       R4, 0, 0
;__Lib_MathDouble.c,2495 :: 		
0x0A38	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_MathDouble.c,2498 :: 		
0x0A3A	0x84D8      	BSF         STATUS, 2, 0
;__Lib_MathDouble.c,2499 :: 		
0x0A3C	0x0012      	RETURN      0
;__Lib_MathDouble.c,2501 :: 		
EQU_FALSE:
;__Lib_MathDouble.c,2503 :: 		
0x0A3E	0x94D8      	BCF         STATUS, 2, 0
;__Lib_MathDouble.c,2504 :: 		
0x0A40	0x0012      	RETURN      0
;__Lib_MathDouble.c,2507 :: 		
L_end_Equals_Double:
0x0A42	0x0012      	RETURN      0
; end of _Equals_Double
_logA_reset:
;log.c,16 :: 		void logA_reset(){
;log.c,18 :: 		for(jj=0; jj<logAindex;jj++){
0x0A44	0x6A01      	CLRF        R1 
L_logA_reset1:
0x0A46	0x0E80      	MOVLW       128
0x0A48	0xBE01      	BTFSC       R1, 7 
0x0A4A	0x0E7F      	MOVLW       127
0x0A4C	0x6E00      	MOVWF       R0 
0x0A4E	0x0E80      	MOVLW       128
0x0A50	0x5C00      	SUBWF       R0, 0 
0x0A52	0xE102      	BNZ         L__logA_reset54
0x0A54	0x5063      	MOVF        _logAindex, 0 
0x0A56	0x5C01      	SUBWF       R1, 0 
L__logA_reset54:
0x0A58	0xE20D      	BC          L_logA_reset2
;log.c,19 :: 		logA[jj]=0;
0x0A5A	0x0ED1      	MOVLW       _logA
0x0A5C	0x6EE1      	MOVWF       FSR1L 
0x0A5E	0x0E00      	MOVLW       hi_addr(_logA)
0x0A60	0x6EE2      	MOVWF       FSR1H 
0x0A62	0x5001      	MOVF        R1, 0 
0x0A64	0x26E1      	ADDWF       FSR1L, 1 
0x0A66	0x0E00      	MOVLW       0
0x0A68	0xBE01      	BTFSC       R1, 7 
0x0A6A	0x0EFF      	MOVLW       255
0x0A6C	0x22E2      	ADDWFC      FSR1H, 1 
0x0A6E	0x6AE6      	CLRF        POSTINC1 
;log.c,18 :: 		for(jj=0; jj<logAindex;jj++){
0x0A70	0x2A01      	INCF        R1, 1 
;log.c,20 :: 		}
0x0A72	0xD7E9      	BRA         L_logA_reset1
L_logA_reset2:
;log.c,21 :: 		logAindex=0;
0x0A74	0x6A63      	CLRF        _logAindex 
;log.c,22 :: 		Apm=-1; Apn=-1; Apx=-1; Apy=-1;
0x0A76	0x0EFF      	MOVLW       255
0x0A78	0x6E3D      	MOVWF       _Apm 
0x0A7A	0x0EFF      	MOVLW       255
0x0A7C	0x6E3B      	MOVWF       _Apn 
0x0A7E	0x0EFF      	MOVLW       255
0x0A80	0x6E3C      	MOVWF       _Apx 
0x0A82	0x0EFF      	MOVLW       255
0x0A84	0x6E31      	MOVWF       _Apy 
;log.c,23 :: 		}
L_end_logA_reset:
0x0A86	0x0012      	RETURN      0
; end of _logA_reset
_SUart0_Init_T:
;pic_swuart.h,21 :: 		
;pic_swuart.h,23 :: 		
0x0A88	0x9292      	BCF         Stx0_pin_Direction, BitPos(Stx0_pin_Direction+0) 
;pic_swuart.h,24 :: 		
0x0A8A	0x9292      	BCF         Scts0_pin_Direction, BitPos(Scts0_pin_Direction+0) 
;pic_swuart.h,25 :: 		
0x0A8C	0x8092      	BSF         Srx0_pin_Direction, BitPos(Srx0_pin_Direction+0) 
;pic_swuart.h,26 :: 		
0x0A8E	0x8280      	BSF         Stx0_pin, BitPos(Stx0_pin+0) 
;pic_swuart.h,27 :: 		
0x0A90	0x9280      	BCF         Scts0_pin, BitPos(Scts0_pin+0) 
;pic_swuart.h,28 :: 		
0x0A92	0x8080      	BSF         Srx0_pin, BitPos(Srx0_pin+0) 
;pic_swuart.h,29 :: 		
L_end_SUart0_Init_T:
0x0A94	0x0012      	RETURN      0
; end of _SUart0_Init_T
_init_var:
;setup.c,74 :: 		void init_var(void){
;setup.c,77 :: 		contador = 0;
0x0A96	0x0101      	MOVLB       1
0x0A98	0x6B46      	CLRF        _contador, 1
0x0A9A	0x6B47      	CLRF        _contador+1, 1
;setup.c,78 :: 		contador_seg = 0;
0x0A9C	0x6A33      	CLRF        _contador_seg 
;setup.c,79 :: 		bk = 0; //flag
0x0A9E	0x9032      	BCF         _bk, BitPos(_bk+0) 
;setup.c,82 :: 		iyn = 0;
0x0AA0	0x6A3F      	CLRF        _iyn 
;setup.c,83 :: 		ixm = 0;
0x0AA2	0x6A5E      	CLRF        _ixm 
0x0AA4	0x6A5F      	CLRF        _ixm+1 
0x0AA6	0x6A60      	CLRF        _ixm+2 
0x0AA8	0x6A61      	CLRF        _ixm+3 
;setup.c,84 :: 		sumi = 1;
0x0AAA	0x0E01      	MOVLW       1
0x0AAC	0x6E58      	MOVWF       _sumi 
;setup.c,85 :: 		jyn = 0;
0x0AAE	0x6A62      	CLRF        _jyn 
;setup.c,86 :: 		jxm = 0;
0x0AB0	0x6A5A      	CLRF        _jxm 
0x0AB2	0x6A5B      	CLRF        _jxm+1 
0x0AB4	0x6A5C      	CLRF        _jxm+2 
0x0AB6	0x6A5D      	CLRF        _jxm+3 
;setup.c,87 :: 		sumj = 1;
0x0AB8	0x0E01      	MOVLW       1
0x0ABA	0x6E59      	MOVWF       _sumj 
;setup.c,90 :: 		aa=2;
0x0ABC	0x0E02      	MOVLW       2
0x0ABE	0x6F4A      	MOVWF       _aa, 1
;setup.c,91 :: 		bb=2;
0x0AC0	0x0E02      	MOVLW       2
0x0AC2	0x6F4B      	MOVWF       _bb, 1
;setup.c,92 :: 		cc=2;
0x0AC4	0x0E02      	MOVLW       2
0x0AC6	0x6E35      	MOVWF       _cc 
;setup.c,93 :: 		dd=2;
0x0AC8	0x0E02      	MOVLW       2
0x0ACA	0x6E36      	MOVWF       _dd 
;setup.c,94 :: 		ee=2;
0x0ACC	0x0E02      	MOVLW       2
0x0ACE	0x6E34      	MOVWF       _ee 
;setup.c,98 :: 		logAindex=100;
0x0AD0	0x0E64      	MOVLW       100
0x0AD2	0x6E63      	MOVWF       _logAindex 
;setup.c,100 :: 		logBindex=100;
0x0AD4	0x0E64      	MOVLW       100
0x0AD6	0x6F35      	MOVWF       _logBindex, 1
;setup.c,101 :: 		logC=0;
0x0AD8	0x6A3E      	CLRF        _logC 
;setup.c,102 :: 		pp=0; //variable para presencia
0x0ADA	0x9232      	BCF         _pp, BitPos(_pp+0) 
;setup.c,103 :: 		pos=0;
0x0ADC	0x6A30      	CLRF        _pos 
;setup.c,104 :: 		Apm=-1; Apn=-1; Apx=-1; Apy=-1;
0x0ADE	0x0EFF      	MOVLW       255
0x0AE0	0x6E3D      	MOVWF       _Apm 
0x0AE2	0x0EFF      	MOVLW       255
0x0AE4	0x6E3B      	MOVWF       _Apn 
0x0AE6	0x0EFF      	MOVLW       255
0x0AE8	0x6E3C      	MOVWF       _Apx 
0x0AEA	0x0EFF      	MOVLW       255
0x0AEC	0x6E31      	MOVWF       _Apy 
;setup.c,105 :: 		Bpm=-1; Bpn=-1; Bpx=-1; Bpy=-1;
0x0AEE	0x0EFF      	MOVLW       255
0x0AF0	0x6E21      	MOVWF       _Bpm 
0x0AF2	0x0EFF      	MOVLW       255
0x0AF4	0x6E1F      	MOVWF       _Bpn 
0x0AF6	0x0EFF      	MOVLW       255
0x0AF8	0x6E1D      	MOVWF       _Bpx 
0x0AFA	0x0EFF      	MOVLW       255
0x0AFC	0x6E1E      	MOVWF       _Bpy 
;setup.c,108 :: 		resultadoA='X';
0x0AFE	0x0E58      	MOVLW       88
0x0B00	0x6E20      	MOVWF       _resultadoA 
;setup.c,109 :: 		resultadoB='X';
0x0B02	0x0E58      	MOVLW       88
0x0B04	0x6E22      	MOVWF       _resultadoB 
;setup.c,110 :: 		resultadoT='X';
0x0B06	0x0E58      	MOVLW       88
0x0B08	0x6E2F      	MOVWF       _resultadoT 
;setup.c,112 :: 		}
L_end_init_var:
0x0B0A	0x0012      	RETURN      0
; end of _init_var
_counter:
;counter.c,3 :: 		void counter(void){
;counter.c,5 :: 		if(aa!=0 && bb!=0 && cc!=0 && dd!=0 && ee!=0){ //cuando todo estan recibiendo luz
0x0B0C	0x0101      	MOVLB       1
0x0B0E	0x514A      	MOVF        _aa, 0, 1
0x0B10	0x0A00      	XORLW       0
0x0B12	0xB4D8      	BTFSC       STATUS, 2 
0x0B14	0xD128      	BRA         L_counter2
0x0B16	0x514B      	MOVF        _bb, 0, 1
0x0B18	0x0A00      	XORLW       0
0x0B1A	0xB4D8      	BTFSC       STATUS, 2 
0x0B1C	0xD124      	BRA         L_counter2
0x0B1E	0x5035      	MOVF        _cc, 0 
0x0B20	0x0A00      	XORLW       0
0x0B22	0xB4D8      	BTFSC       STATUS, 2 
0x0B24	0xD120      	BRA         L_counter2
0x0B26	0x5036      	MOVF        _dd, 0 
0x0B28	0x0A00      	XORLW       0
0x0B2A	0xB4D8      	BTFSC       STATUS, 2 
0x0B2C	0xD11C      	BRA         L_counter2
0x0B2E	0x5034      	MOVF        _ee, 0 
0x0B30	0x0A00      	XORLW       0
0x0B32	0xB4D8      	BTFSC       STATUS, 2 
0x0B34	0xD118      	BRA         L_counter2
L__counter72:
;counter.c,6 :: 		if(bk==1){
0x0B36	0xA032      	BTFSS       _bk, BitPos(_bk+0) 
0x0B38	0xD003      	BRA         L_counter3
;counter.c,7 :: 		contador_seg=0;
0x0B3A	0x6A33      	CLRF        _contador_seg 
;counter.c,8 :: 		BUZZER = 1;
0x0B3C	0x8A83      	BSF         PORTD, 5 
;counter.c,9 :: 		bk=0;
0x0B3E	0x9032      	BCF         _bk, BitPos(_bk+0) 
;counter.c,10 :: 		}
L_counter3:
;counter.c,11 :: 		if(pp==1){ //flanco descendente
0x0B40	0xA232      	BTFSS       _pp, BitPos(_pp+0) 
0x0B42	0xD111      	BRA         L_counter4
;counter.c,13 :: 		if(logC>=2){ //piso plano
0x0B44	0x0E02      	MOVLW       2
0x0B46	0x5C3E      	SUBWF       _logC, 0 
0x0B48	0xA0D8      	BTFSS       STATUS, 0 
0x0B4A	0xD0E6      	BRA         L_counter5
;counter.c,17 :: 		if(Apm!=-1 && Apn!=-1 && Apx!=-1 && Apy!=-1){
0x0B4C	0x503D      	MOVF        _Apm, 0 
0x0B4E	0x0AFF      	XORLW       255
0x0B50	0xE029      	BZ          L_counter8
0x0B52	0x503B      	MOVF        _Apn, 0 
0x0B54	0x0AFF      	XORLW       255
0x0B56	0xE026      	BZ          L_counter8
0x0B58	0x503C      	MOVF        _Apx, 0 
0x0B5A	0x0AFF      	XORLW       255
0x0B5C	0xE023      	BZ          L_counter8
0x0B5E	0x5031      	MOVF        _Apy, 0 
0x0B60	0x0AFF      	XORLW       255
0x0B62	0xE020      	BZ          L_counter8
L__counter71:
;counter.c,18 :: 		if(Apm>Apx){
0x0B64	0x0E80      	MOVLW       128
0x0B66	0x183C      	XORWF       _Apx, 0 
0x0B68	0x6E00      	MOVWF       R0 
0x0B6A	0x0E80      	MOVLW       128
0x0B6C	0x183D      	XORWF       _Apm, 0 
0x0B6E	0x5C00      	SUBWF       R0, 0 
0x0B70	0xE20D      	BC          L_counter9
;counter.c,20 :: 		if(Apn>Apy){ // entra-entra
0x0B72	0x0E80      	MOVLW       128
0x0B74	0x1831      	XORWF       _Apy, 0 
0x0B76	0x6E00      	MOVWF       R0 
0x0B78	0x0E80      	MOVLW       128
0x0B7A	0x183B      	XORWF       _Apn, 0 
0x0B7C	0x5C00      	SUBWF       R0, 0 
0x0B7E	0xE203      	BC          L_counter10
;counter.c,22 :: 		resultadoA='E';
0x0B80	0x0E45      	MOVLW       69
0x0B82	0x6E20      	MOVWF       _resultadoA 
;counter.c,23 :: 		}
0x0B84	0xD002      	BRA         L_counter11
L_counter10:
;counter.c,26 :: 		resultadoA='Q';
0x0B86	0x0E51      	MOVLW       81
0x0B88	0x6E20      	MOVWF       _resultadoA 
;counter.c,27 :: 		}
L_counter11:
;counter.c,28 :: 		}
0x0B8A	0xD00C      	BRA         L_counter12
L_counter9:
;counter.c,31 :: 		if(Apn>Apy){ //entra-sale
0x0B8C	0x0E80      	MOVLW       128
0x0B8E	0x1831      	XORWF       _Apy, 0 
0x0B90	0x6E00      	MOVWF       R0 
0x0B92	0x0E80      	MOVLW       128
0x0B94	0x183B      	XORWF       _Apn, 0 
0x0B96	0x5C00      	SUBWF       R0, 0 
0x0B98	0xE203      	BC          L_counter13
;counter.c,33 :: 		resultadoA='P';
0x0B9A	0x0E50      	MOVLW       80
0x0B9C	0x6E20      	MOVWF       _resultadoA 
;counter.c,34 :: 		}
0x0B9E	0xD002      	BRA         L_counter14
L_counter13:
;counter.c,37 :: 		resultadoA='S';
0x0BA0	0x0E53      	MOVLW       83
0x0BA2	0x6E20      	MOVWF       _resultadoA 
;counter.c,38 :: 		}
L_counter14:
;counter.c,39 :: 		}
L_counter12:
;counter.c,40 :: 		}
L_counter8:
;counter.c,44 :: 		if(Bpm!=-1 && Bpn!=-1 && Bpx!=-1 && Bpy!=-1){
0x0BA4	0x5021      	MOVF        _Bpm, 0 
0x0BA6	0x0AFF      	XORLW       255
0x0BA8	0xE029      	BZ          L_counter17
0x0BAA	0x501F      	MOVF        _Bpn, 0 
0x0BAC	0x0AFF      	XORLW       255
0x0BAE	0xE026      	BZ          L_counter17
0x0BB0	0x501D      	MOVF        _Bpx, 0 
0x0BB2	0x0AFF      	XORLW       255
0x0BB4	0xE023      	BZ          L_counter17
0x0BB6	0x501E      	MOVF        _Bpy, 0 
0x0BB8	0x0AFF      	XORLW       255
0x0BBA	0xE020      	BZ          L_counter17
L__counter70:
;counter.c,45 :: 		if(Bpm>Bpx){
0x0BBC	0x0E80      	MOVLW       128
0x0BBE	0x181D      	XORWF       _Bpx, 0 
0x0BC0	0x6E00      	MOVWF       R0 
0x0BC2	0x0E80      	MOVLW       128
0x0BC4	0x1821      	XORWF       _Bpm, 0 
0x0BC6	0x5C00      	SUBWF       R0, 0 
0x0BC8	0xE20D      	BC          L_counter18
;counter.c,47 :: 		if(Bpn>Bpy){ // entra-entra
0x0BCA	0x0E80      	MOVLW       128
0x0BCC	0x181E      	XORWF       _Bpy, 0 
0x0BCE	0x6E00      	MOVWF       R0 
0x0BD0	0x0E80      	MOVLW       128
0x0BD2	0x181F      	XORWF       _Bpn, 0 
0x0BD4	0x5C00      	SUBWF       R0, 0 
0x0BD6	0xE203      	BC          L_counter19
;counter.c,49 :: 		resultadoB='E';
0x0BD8	0x0E45      	MOVLW       69
0x0BDA	0x6E22      	MOVWF       _resultadoB 
;counter.c,50 :: 		}
0x0BDC	0xD002      	BRA         L_counter20
L_counter19:
;counter.c,53 :: 		resultadoB='Q';
0x0BDE	0x0E51      	MOVLW       81
0x0BE0	0x6E22      	MOVWF       _resultadoB 
;counter.c,54 :: 		}
L_counter20:
;counter.c,55 :: 		}
0x0BE2	0xD00C      	BRA         L_counter21
L_counter18:
;counter.c,58 :: 		if(Bpn>Bpy){ //entro-sale
0x0BE4	0x0E80      	MOVLW       128
0x0BE6	0x181E      	XORWF       _Bpy, 0 
0x0BE8	0x6E00      	MOVWF       R0 
0x0BEA	0x0E80      	MOVLW       128
0x0BEC	0x181F      	XORWF       _Bpn, 0 
0x0BEE	0x5C00      	SUBWF       R0, 0 
0x0BF0	0xE203      	BC          L_counter22
;counter.c,60 :: 		resultadoB='P';
0x0BF2	0x0E50      	MOVLW       80
0x0BF4	0x6E22      	MOVWF       _resultadoB 
;counter.c,61 :: 		}
0x0BF6	0xD002      	BRA         L_counter23
L_counter22:
;counter.c,64 :: 		resultadoB='S';
0x0BF8	0x0E53      	MOVLW       83
0x0BFA	0x6E22      	MOVWF       _resultadoB 
;counter.c,65 :: 		}
L_counter23:
;counter.c,66 :: 		}
L_counter21:
;counter.c,67 :: 		}
L_counter17:
;counter.c,69 :: 		if(resultadoA!='X' && resultadoB!='X'){
0x0BFC	0x5020      	MOVF        _resultadoA, 0 
0x0BFE	0x0A58      	XORLW       88
0x0C00	0xE01D      	BZ          L_counter26
0x0C02	0x5022      	MOVF        _resultadoB, 0 
0x0C04	0x0A58      	XORLW       88
0x0C06	0xE01A      	BZ          L_counter26
L__counter69:
;counter.c,70 :: 		if(resultadoB=='S' || (resultadoA=='S' && resultadoB=='P')){
0x0C08	0x5022      	MOVF        _resultadoB, 0 
0x0C0A	0x0A53      	XORLW       83
0x0C0C	0xE008      	BZ          L__counter67
0x0C0E	0x5020      	MOVF        _resultadoA, 0 
0x0C10	0x0A53      	XORLW       83
0x0C12	0xE104      	BNZ         L__counter68
0x0C14	0x5022      	MOVF        _resultadoB, 0 
0x0C16	0x0A50      	XORLW       80
0x0C18	0xE101      	BNZ         L__counter68
0x0C1A	0xD001      	BRA         L__counter67
L__counter68:
0x0C1C	0xD002      	BRA         L_counter31
L__counter67:
;counter.c,71 :: 		resultadoT='S';
0x0C1E	0x0E53      	MOVLW       83
0x0C20	0x6E2F      	MOVWF       _resultadoT 
;counter.c,72 :: 		}
L_counter31:
;counter.c,73 :: 		if(resultadoB=='E' || (resultadoA=='E' && resultadoB=='Q')){
0x0C22	0x5022      	MOVF        _resultadoB, 0 
0x0C24	0x0A45      	XORLW       69
0x0C26	0xE008      	BZ          L__counter65
0x0C28	0x5020      	MOVF        _resultadoA, 0 
0x0C2A	0x0A45      	XORLW       69
0x0C2C	0xE104      	BNZ         L__counter66
0x0C2E	0x5022      	MOVF        _resultadoB, 0 
0x0C30	0x0A51      	XORLW       81
0x0C32	0xE101      	BNZ         L__counter66
0x0C34	0xD001      	BRA         L__counter65
L__counter66:
0x0C36	0xD002      	BRA         L_counter36
L__counter65:
;counter.c,74 :: 		resultadoT='E';
0x0C38	0x0E45      	MOVLW       69
0x0C3A	0x6E2F      	MOVWF       _resultadoT 
;counter.c,75 :: 		}
L_counter36:
;counter.c,76 :: 		}
L_counter26:
;counter.c,78 :: 		if(pos==1){
0x0C3C	0x5030      	MOVF        _pos, 0 
0x0C3E	0x0A01      	XORLW       1
0x0C40	0xE106      	BNZ         L_counter37
;counter.c,79 :: 		if(resultadoT=='E'){ resultadoT='X'; }
0x0C42	0x502F      	MOVF        _resultadoT, 0 
0x0C44	0x0A45      	XORLW       69
0x0C46	0xE102      	BNZ         L_counter38
0x0C48	0x0E58      	MOVLW       88
0x0C4A	0x6E2F      	MOVWF       _resultadoT 
L_counter38:
;counter.c,80 :: 		}
0x0C4C	0xD035      	BRA         L_counter39
L_counter37:
;counter.c,81 :: 		else if(pos==11){
0x0C4E	0x5030      	MOVF        _pos, 0 
0x0C50	0x0A0B      	XORLW       11
0x0C52	0xE106      	BNZ         L_counter40
;counter.c,82 :: 		if(resultadoT=='S'){ resultadoT='X'; }
0x0C54	0x502F      	MOVF        _resultadoT, 0 
0x0C56	0x0A53      	XORLW       83
0x0C58	0xE102      	BNZ         L_counter41
0x0C5A	0x0E58      	MOVLW       88
0x0C5C	0x6E2F      	MOVWF       _resultadoT 
L_counter41:
;counter.c,83 :: 		}
0x0C5E	0xD02C      	BRA         L_counter42
L_counter40:
;counter.c,84 :: 		else if(pos==111){
0x0C60	0x5030      	MOVF        _pos, 0 
0x0C62	0x0A6F      	XORLW       111
0x0C64	0xE10C      	BNZ         L_counter43
;counter.c,85 :: 		if(resultadoT=='E'){ resultadoT='S'; }
0x0C66	0x502F      	MOVF        _resultadoT, 0 
0x0C68	0x0A45      	XORLW       69
0x0C6A	0xE103      	BNZ         L_counter44
0x0C6C	0x0E53      	MOVLW       83
0x0C6E	0x6E2F      	MOVWF       _resultadoT 
0x0C70	0xD005      	BRA         L_counter45
L_counter44:
;counter.c,86 :: 		else if(resultadoT=='S'){ resultadoT='E'; }
0x0C72	0x502F      	MOVF        _resultadoT, 0 
0x0C74	0x0A53      	XORLW       83
0x0C76	0xE102      	BNZ         L_counter46
0x0C78	0x0E45      	MOVLW       69
0x0C7A	0x6E2F      	MOVWF       _resultadoT 
L_counter46:
L_counter45:
;counter.c,87 :: 		}
0x0C7C	0xD01D      	BRA         L_counter47
L_counter43:
;counter.c,88 :: 		else if(pos==110){
0x0C7E	0x5030      	MOVF        _pos, 0 
0x0C80	0x0A6E      	XORLW       110
0x0C82	0xE10C      	BNZ         L_counter48
;counter.c,89 :: 		if(resultadoT=='E'){ resultadoT='S'; }
0x0C84	0x502F      	MOVF        _resultadoT, 0 
0x0C86	0x0A45      	XORLW       69
0x0C88	0xE103      	BNZ         L_counter49
0x0C8A	0x0E53      	MOVLW       83
0x0C8C	0x6E2F      	MOVWF       _resultadoT 
0x0C8E	0xD005      	BRA         L_counter50
L_counter49:
;counter.c,90 :: 		else if(resultadoT=='S'){ resultadoT='X'; }
0x0C90	0x502F      	MOVF        _resultadoT, 0 
0x0C92	0x0A53      	XORLW       83
0x0C94	0xE102      	BNZ         L_counter51
0x0C96	0x0E58      	MOVLW       88
0x0C98	0x6E2F      	MOVWF       _resultadoT 
L_counter51:
L_counter50:
;counter.c,91 :: 		}
0x0C9A	0xD00E      	BRA         L_counter52
L_counter48:
;counter.c,92 :: 		else if(pos==100){
0x0C9C	0x5030      	MOVF        _pos, 0 
0x0C9E	0x0A64      	XORLW       100
0x0CA0	0xE10B      	BNZ         L_counter53
;counter.c,93 :: 		if(resultadoT=='E'){ resultadoT='X'; }
0x0CA2	0x502F      	MOVF        _resultadoT, 0 
0x0CA4	0x0A45      	XORLW       69
0x0CA6	0xE103      	BNZ         L_counter54
0x0CA8	0x0E58      	MOVLW       88
0x0CAA	0x6E2F      	MOVWF       _resultadoT 
0x0CAC	0xD005      	BRA         L_counter55
L_counter54:
;counter.c,94 :: 		else if(resultadoT=='S'){ resultadoT='E'; }
0x0CAE	0x502F      	MOVF        _resultadoT, 0 
0x0CB0	0x0A53      	XORLW       83
0x0CB2	0xE102      	BNZ         L_counter56
0x0CB4	0x0E45      	MOVLW       69
0x0CB6	0x6E2F      	MOVWF       _resultadoT 
L_counter56:
L_counter55:
;counter.c,95 :: 		}
L_counter53:
L_counter52:
L_counter47:
L_counter42:
L_counter39:
;counter.c,98 :: 		if(resultadoT=='E'){
0x0CB8	0x502F      	MOVF        _resultadoT, 0 
0x0CBA	0x0A45      	XORLW       69
0x0CBC	0xE115      	BNZ         L_counter57
;counter.c,99 :: 		ENTRAN++;
0x0CBE	0x0E01      	MOVLW       1
0x0CC0	0x262B      	ADDWF       _ENTRAN, 1 
0x0CC2	0x0E00      	MOVLW       0
0x0CC4	0x222C      	ADDWFC      _ENTRAN+1, 1 
0x0CC6	0x222D      	ADDWFC      _ENTRAN+2, 1 
0x0CC8	0x222E      	ADDWFC      _ENTRAN+3, 1 
;counter.c,100 :: 		NUMPER=ENTRAN+SALEN;
0x0CCA	0x5027      	MOVF        _SALEN, 0 
0x0CCC	0x242B      	ADDWF       _ENTRAN, 0 
0x0CCE	0x6E23      	MOVWF       _NUMPER 
0x0CD0	0x5028      	MOVF        _SALEN+1, 0 
0x0CD2	0x202C      	ADDWFC      _ENTRAN+1, 0 
0x0CD4	0x6E24      	MOVWF       _NUMPER+1 
0x0CD6	0x5029      	MOVF        _SALEN+2, 0 
0x0CD8	0x202D      	ADDWFC      _ENTRAN+2, 0 
0x0CDA	0x6E25      	MOVWF       _NUMPER+2 
0x0CDC	0x502A      	MOVF        _SALEN+3, 0 
0x0CDE	0x202E      	ADDWFC      _ENTRAN+3, 0 
0x0CE0	0x6E26      	MOVWF       _NUMPER+3 
;counter.c,101 :: 		resultadoT='X';
0x0CE2	0x0E58      	MOVLW       88
0x0CE4	0x6E2F      	MOVWF       _resultadoT 
;counter.c,104 :: 		save_data();
0x0CE6	0xDC62      	RCALL       _save_data
;counter.c,105 :: 		}
L_counter57:
;counter.c,106 :: 		if(resultadoT=='S'){
0x0CE8	0x502F      	MOVF        _resultadoT, 0 
0x0CEA	0x0A53      	XORLW       83
0x0CEC	0xE115      	BNZ         L_counter58
;counter.c,107 :: 		SALEN++;
0x0CEE	0x0E01      	MOVLW       1
0x0CF0	0x2627      	ADDWF       _SALEN, 1 
0x0CF2	0x0E00      	MOVLW       0
0x0CF4	0x2228      	ADDWFC      _SALEN+1, 1 
0x0CF6	0x2229      	ADDWFC      _SALEN+2, 1 
0x0CF8	0x222A      	ADDWFC      _SALEN+3, 1 
;counter.c,108 :: 		NUMPER=ENTRAN+SALEN;
0x0CFA	0x5027      	MOVF        _SALEN, 0 
0x0CFC	0x242B      	ADDWF       _ENTRAN, 0 
0x0CFE	0x6E23      	MOVWF       _NUMPER 
0x0D00	0x5028      	MOVF        _SALEN+1, 0 
0x0D02	0x202C      	ADDWFC      _ENTRAN+1, 0 
0x0D04	0x6E24      	MOVWF       _NUMPER+1 
0x0D06	0x5029      	MOVF        _SALEN+2, 0 
0x0D08	0x202D      	ADDWFC      _ENTRAN+2, 0 
0x0D0A	0x6E25      	MOVWF       _NUMPER+2 
0x0D0C	0x502A      	MOVF        _SALEN+3, 0 
0x0D0E	0x202E      	ADDWFC      _ENTRAN+3, 0 
0x0D10	0x6E26      	MOVWF       _NUMPER+3 
;counter.c,109 :: 		resultadoT='X';
0x0D12	0x0E58      	MOVLW       88
0x0D14	0x6E2F      	MOVWF       _resultadoT 
;counter.c,117 :: 		save_data();
0x0D16	0xDC4A      	RCALL       _save_data
;counter.c,118 :: 		}
L_counter58:
;counter.c,120 :: 		}
L_counter5:
;counter.c,122 :: 		logC=0;
0x0D18	0x6A3E      	CLRF        _logC 
;counter.c,123 :: 		Bpm=-1; Bpn=-1; Bpx=-1; Bpy=-1;
0x0D1A	0x0EFF      	MOVLW       255
0x0D1C	0x6E21      	MOVWF       _Bpm 
0x0D1E	0x0EFF      	MOVLW       255
0x0D20	0x6E1F      	MOVWF       _Bpn 
0x0D22	0x0EFF      	MOVLW       255
0x0D24	0x6E1D      	MOVWF       _Bpx 
0x0D26	0x0EFF      	MOVLW       255
0x0D28	0x6E1E      	MOVWF       _Bpy 
;counter.c,124 :: 		Apm=-1; Apn=-1; Apx=-1; Apy=-1;
0x0D2A	0x0EFF      	MOVLW       255
0x0D2C	0x6E3D      	MOVWF       _Apm 
0x0D2E	0x0EFF      	MOVLW       255
0x0D30	0x6E3B      	MOVWF       _Apn 
0x0D32	0x0EFF      	MOVLW       255
0x0D34	0x6E3C      	MOVWF       _Apx 
0x0D36	0x0EFF      	MOVLW       255
0x0D38	0x6E31      	MOVWF       _Apy 
;counter.c,125 :: 		iyn=0; ixm = 0; jyn=0; jxm=0;
0x0D3A	0x6A3F      	CLRF        _iyn 
0x0D3C	0x6A5E      	CLRF        _ixm 
0x0D3E	0x6A5F      	CLRF        _ixm+1 
0x0D40	0x6A60      	CLRF        _ixm+2 
0x0D42	0x6A61      	CLRF        _ixm+3 
0x0D44	0x6A62      	CLRF        _jyn 
0x0D46	0x6A5A      	CLRF        _jxm 
0x0D48	0x6A5B      	CLRF        _jxm+1 
0x0D4A	0x6A5C      	CLRF        _jxm+2 
0x0D4C	0x6A5D      	CLRF        _jxm+3 
;counter.c,126 :: 		aa=2; bb=2; cc=2; dd=2; ee=2;
0x0D4E	0x0E02      	MOVLW       2
0x0D50	0x0101      	MOVLB       1
0x0D52	0x6F4A      	MOVWF       _aa, 1
0x0D54	0x0E02      	MOVLW       2
0x0D56	0x6F4B      	MOVWF       _bb, 1
0x0D58	0x0E02      	MOVLW       2
0x0D5A	0x6E35      	MOVWF       _cc 
0x0D5C	0x0E02      	MOVLW       2
0x0D5E	0x6E36      	MOVWF       _dd 
0x0D60	0x0E02      	MOVLW       2
0x0D62	0x6E34      	MOVWF       _ee 
;counter.c,127 :: 		pp=0; //flag de presencia
0x0D64	0x9232      	BCF         _pp, BitPos(_pp+0) 
;counter.c,128 :: 		}
L_counter4:
;counter.c,129 :: 		}
L_counter2:
;counter.c,131 :: 		if(aa==0 || bb==0 || cc==0 || dd==0 || ee==0){ //cuando alguno esta bloqueado
0x0D66	0x514A      	MOVF        _aa, 0, 1
0x0D68	0x0A00      	XORLW       0
0x0D6A	0xE00D      	BZ          L__counter64
0x0D6C	0x514B      	MOVF        _bb, 0, 1
0x0D6E	0x0A00      	XORLW       0
0x0D70	0xE00A      	BZ          L__counter64
0x0D72	0x5035      	MOVF        _cc, 0 
0x0D74	0x0A00      	XORLW       0
0x0D76	0xE007      	BZ          L__counter64
0x0D78	0x5036      	MOVF        _dd, 0 
0x0D7A	0x0A00      	XORLW       0
0x0D7C	0xE004      	BZ          L__counter64
0x0D7E	0x5034      	MOVF        _ee, 0 
0x0D80	0x0A00      	XORLW       0
0x0D82	0xE001      	BZ          L__counter64
0x0D84	0xD00B      	BRA         L_counter61
L__counter64:
;counter.c,132 :: 		if(pp==0){ //flanco ascendete
0x0D86	0xB232      	BTFSC       _pp, BitPos(_pp+0) 
0x0D88	0xD007      	BRA         L_counter62
;counter.c,133 :: 		pp=1;
0x0D8A	0x8232      	BSF         _pp, BitPos(_pp+0) 
;counter.c,134 :: 		resultadoA='X';
0x0D8C	0x0E58      	MOVLW       88
0x0D8E	0x6E20      	MOVWF       _resultadoA 
;counter.c,135 :: 		resultadoB='X';
0x0D90	0x0E58      	MOVLW       88
0x0D92	0x6E22      	MOVWF       _resultadoB 
;counter.c,136 :: 		resultadoT='X';
0x0D94	0x0E58      	MOVLW       88
0x0D96	0x6E2F      	MOVWF       _resultadoT 
;counter.c,137 :: 		}
L_counter62:
;counter.c,138 :: 		if (bk==0){ bk=1; }
0x0D98	0xA032      	BTFSS       _bk, BitPos(_bk+0) 
0x0D9A	0x8032      	BSF         _bk, BitPos(_bk+0) 
L_counter63:
;counter.c,139 :: 		}
L_counter61:
;counter.c,140 :: 		}
L_end_counter:
0x0D9C	0x0012      	RETURN      0
; end of _counter
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0D9E	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0DA0	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0DA4	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0DA6	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0DA8	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0DAA	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0DAC	0x0012      	RETURN      0
; end of ___CC2DW
_init_setup:
;setup.c,7 :: 		void init_setup(void){
;setup.c,10 :: 		NUMPER = 0;
0x0DAE	0x6A23      	CLRF        _NUMPER 
0x0DB0	0x6A24      	CLRF        _NUMPER+1 
0x0DB2	0x6A25      	CLRF        _NUMPER+2 
0x0DB4	0x6A26      	CLRF        _NUMPER+3 
;setup.c,11 :: 		if(read_long(92)==555){
0x0DB6	0x0E5C      	MOVLW       92
0x0DB8	0x0101      	MOVLB       1
0x0DBA	0x6F58      	MOVWF       FARG_read_long_addr, 1
0x0DBC	0x0E00      	MOVLW       0
0x0DBE	0x6F59      	MOVWF       FARG_read_long_addr+1, 1
0x0DC0	0xF001EC64  	CALL        _read_long, 0
0x0DC4	0x0E00      	MOVLW       0
0x0DC6	0x6E04      	MOVWF       R4 
0x0DC8	0x1803      	XORWF       R3, 0 
0x0DCA	0xE108      	BNZ         L__init_setup26
0x0DCC	0x5004      	MOVF        R4, 0 
0x0DCE	0x1802      	XORWF       R2, 0 
0x0DD0	0xE105      	BNZ         L__init_setup26
0x0DD2	0x0E02      	MOVLW       2
0x0DD4	0x1801      	XORWF       R1, 0 
0x0DD6	0xE102      	BNZ         L__init_setup26
0x0DD8	0x5000      	MOVF        R0, 0 
0x0DDA	0x0A2B      	XORLW       43
L__init_setup26:
0x0DDC	0xE103      	BNZ         L_init_setup0
;setup.c,12 :: 		read_data();
0x0DDE	0xF002ECA0  	CALL        _read_data, 0
;setup.c,13 :: 		}
0x0DE2	0xD00E      	BRA         L_init_setup1
L_init_setup0:
;setup.c,15 :: 		SALEN = 0;
0x0DE4	0x6A27      	CLRF        _SALEN 
0x0DE6	0x6A28      	CLRF        _SALEN+1 
0x0DE8	0x6A29      	CLRF        _SALEN+2 
0x0DEA	0x6A2A      	CLRF        _SALEN+3 
;setup.c,16 :: 		ENTRAN = 0;
0x0DEC	0x6A2B      	CLRF        _ENTRAN 
0x0DEE	0x6A2C      	CLRF        _ENTRAN+1 
0x0DF0	0x6A2D      	CLRF        _ENTRAN+2 
0x0DF2	0x6A2E      	CLRF        _ENTRAN+3 
;setup.c,17 :: 		BLOQUEOS = 0;
0x0DF4	0x6A37      	CLRF        _BLOQUEOS 
0x0DF6	0x6A38      	CLRF        _BLOQUEOS+1 
0x0DF8	0x6A39      	CLRF        _BLOQUEOS+2 
0x0DFA	0x6A3A      	CLRF        _BLOQUEOS+3 
;setup.c,18 :: 		save_data();
0x0DFC	0xF002ECD6  	CALL        _save_data, 0
;setup.c,19 :: 		}
L_init_setup1:
;setup.c,21 :: 		ADCON1= 0b00001111; // Configure AN pins as digital I/O
0x0E00	0x0E0F      	MOVLW       15
0x0E02	0x6EC1      	MOVWF       ADCON1 
;setup.c,22 :: 		CMCON = 0b00000111; // Disable comparators
0x0E04	0x0E07      	MOVLW       7
0x0E06	0x6EB4      	MOVWF       CMCON 
;setup.c,24 :: 		PORTA = 0;
0x0E08	0x6A80      	CLRF        PORTA 
;setup.c,25 :: 		PORTB = 0;
0x0E0A	0x6A81      	CLRF        PORTB 
;setup.c,26 :: 		PORTC = 0;
0x0E0C	0x6A82      	CLRF        PORTC 
;setup.c,27 :: 		PORTD = 0;
0x0E0E	0x6A83      	CLRF        PORTD 
;setup.c,28 :: 		PORTE = 0;
0x0E10	0x6A84      	CLRF        PORTE 
;setup.c,30 :: 		TRISA = 0b11011011; // salidas =0  entradas=1
0x0E12	0x0EDB      	MOVLW       219
0x0E14	0x6E92      	MOVWF       TRISA 
;setup.c,31 :: 		TRISB = 0b11111001;
0x0E16	0x0EF9      	MOVLW       249
0x0E18	0x6E93      	MOVWF       TRISB 
;setup.c,32 :: 		TRISC = 0b11011011;
0x0E1A	0x0EDB      	MOVLW       219
0x0E1C	0x6E94      	MOVWF       TRISC 
;setup.c,33 :: 		TRISD = 0b11011011;
0x0E1E	0x0EDB      	MOVLW       219
0x0E20	0x6E95      	MOVWF       TRISD 
;setup.c,34 :: 		TRISE = 0b00000110;
0x0E22	0x0E06      	MOVLW       6
0x0E24	0x6E96      	MOVWF       TRISE 
;setup.c,37 :: 		init_led();
0x0E26	0xDD32      	RCALL       _init_led
;setup.c,38 :: 		init_485();
0x0E28	0xF000EC03  	CALL        _init_485, 0
;setup.c,39 :: 		init_var();
0x0E2C	0xDE34      	RCALL       _init_var
;setup.c,41 :: 		logA_reset();
0x0E2E	0xDE0A      	RCALL       _logA_reset
;setup.c,42 :: 		logB_reset();
0x0E30	0xDD7F      	RCALL       _logB_reset
;setup.c,45 :: 		PWM1_Init(36000);
0x0E32	0x80CA      	BSF         T2CON, 0, 0
0x0E34	0x92CA      	BCF         T2CON, 1, 0
0x0E36	0x0E45      	MOVLW       69
0x0E38	0x6ECB      	MOVWF       PR2, 0
0x0E3A	0xDD71      	RCALL       _PWM1_Init
;setup.c,46 :: 		PWM1_Set_Duty(25);
0x0E3C	0x0E19      	MOVLW       25
0x0E3E	0x6F4F      	MOVWF       FARG_PWM1_Set_Duty_new_duty, 1
0x0E40	0xDD9B      	RCALL       _PWM1_Set_Duty
;setup.c,47 :: 		PWM1_Start();
0x0E42	0xDD71      	RCALL       _PWM1_Start
;setup.c,50 :: 		SUart0_Init_T();
0x0E44	0xDE21      	RCALL       _SUart0_Init_T
;setup.c,52 :: 		Delay_ms(100);
0x0E46	0x0E06      	MOVLW       6
0x0E48	0x6E0B      	MOVWF       R11, 0
0x0E4A	0x0E13      	MOVLW       19
0x0E4C	0x6E0C      	MOVWF       R12, 0
0x0E4E	0x0EAD      	MOVLW       173
0x0E50	0x6E0D      	MOVWF       R13, 0
L_init_setup2:
0x0E52	0x2E0D      	DECFSZ      R13, 1, 0
0x0E54	0xD7FE      	BRA         L_init_setup2
0x0E56	0x2E0C      	DECFSZ      R12, 1, 0
0x0E58	0xD7FC      	BRA         L_init_setup2
0x0E5A	0x2E0B      	DECFSZ      R11, 1, 0
0x0E5C	0xD7FA      	BRA         L_init_setup2
0x0E5E	0x0000      	NOP
0x0E60	0x0000      	NOP
;setup.c,53 :: 		}
L_end_init_setup:
0x0E62	0x0012      	RETURN      0
; end of _init_setup
_RS485Slave_Receive:
;__Lib_RS485.c,69 :: 		
;__Lib_RS485.c,73 :: 		
0x0E64	0xF000C04E  	MOVFF       _UART_Rdy_Ptr, R0
0x0E68	0xF001C04F  	MOVFF       _UART_Rdy_Ptr+1, R1
0x0E6C	0xF000EC82  	CALL        _____DoIFC, 0
0x0E70	0x5200      	MOVF        R0, 1 
0x0E72	0xE101      	BNZ         L_RS485Slave_Receive3
;__Lib_RS485.c,74 :: 		
0x0E74	0xD120      	BRA         L_end_RS485Slave_Receive
L_RS485Slave_Receive3:
;__Lib_RS485.c,75 :: 		
0x0E76	0xF000C041  	MOVFF       _UART_Rd_Ptr, R0
0x0E7A	0xF001C042  	MOVFF       _UART_Rd_Ptr+1, R1
0x0E7E	0xF000EC82  	CALL        _____DoIFC, 0
0x0E82	0xF053C000  	MOVFF       R0, RS485Slave_Receive_rec_L0
;__Lib_RS485.c,77 :: 		
0x0E86	0xD0FC      	BRA         L_RS485Slave_Receive4
;__Lib_RS485.c,78 :: 		
L_RS485Slave_Receive6:
;__Lib_RS485.c,79 :: 		
0x0E88	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0E8A	0x0A96      	XORLW       150
0x0E8C	0xE103      	BNZ         L_RS485Slave_Receive7
;__Lib_RS485.c,80 :: 		
0x0E8E	0x0E02      	MOVLW       2
0x0E90	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,81 :: 		
0x0E92	0x6A52      	CLRF        RS485Slave_Receive_crc_is_ok_L0 
;__Lib_RS485.c,82 :: 		
L_RS485Slave_Receive7:
;__Lib_RS485.c,83 :: 		
0x0E94	0xD110      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,86 :: 		
L_RS485Slave_Receive8:
;__Lib_RS485.c,87 :: 		
0x0E96	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0E98	0x1857      	XORWF       __Lib_RS485__sladdress, 0 
0x0E9A	0xE004      	BZ          L__RS485Slave_Receive106
0x0E9C	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0E9E	0x0A32      	XORLW       50
0x0EA0	0xE001      	BZ          L__RS485Slave_Receive106
0x0EA2	0xD005      	BRA         L_RS485Slave_Receive11
L__RS485Slave_Receive106:
;__Lib_RS485.c,88 :: 		
0x0EA4	0x0E03      	MOVLW       3
0x0EA6	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,90 :: 		
0x0EA8	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0EAA	0x1A52      	XORWF       RS485Slave_Receive_crc_is_ok_L0, 1 
;__Lib_RS485.c,91 :: 		
0x0EAC	0xD002      	BRA         L_RS485Slave_Receive12
L_RS485Slave_Receive11:
;__Lib_RS485.c,93 :: 		
0x0EAE	0x0E01      	MOVLW       1
0x0EB0	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,94 :: 		
L_RS485Slave_Receive12:
;__Lib_RS485.c,95 :: 		
0x0EB2	0xD101      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,97 :: 		
L_RS485Slave_Receive13:
;__Lib_RS485.c,98 :: 		
0x0EB4	0x5249      	MOVF        __Lib_RS485_specadr, 1 
0x0EB6	0xE009      	BZ          L_RS485Slave_Receive14
;__Lib_RS485.c,99 :: 		
0x0EB8	0x0E40      	MOVLW       64
0x0EBA	0x1453      	ANDWF       RS485Slave_Receive_rec_L0, 0 
0x0EBC	0x6E01      	MOVWF       R1 
0x0EBE	0x5001      	MOVF        R1, 0 
0x0EC0	0x0A00      	XORLW       0
0x0EC2	0xE103      	BNZ         L_RS485Slave_Receive15
;__Lib_RS485.c,100 :: 		
0x0EC4	0x0E01      	MOVLW       1
0x0EC6	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,101 :: 		
0x0EC8	0xD0F6      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,102 :: 		
L_RS485Slave_Receive15:
L_RS485Slave_Receive14:
;__Lib_RS485.c,104 :: 		
0x0ECA	0xAE53      	BTFSS       RS485Slave_Receive_rec_L0, 7 
0x0ECC	0xD013      	BRA         L_RS485Slave_Receive16
;__Lib_RS485.c,105 :: 		
0x0ECE	0x0E04      	MOVLW       4
0x0ED0	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,106 :: 		
0x0ED2	0xF055C053  	MOVFF       RS485Slave_Receive_rec_L0, RS485Slave_Receive_key_L0
;__Lib_RS485.c,107 :: 		
0x0ED6	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0ED8	0x1A52      	XORWF       RS485Slave_Receive_crc_is_ok_L0, 1 
;__Lib_RS485.c,108 :: 		
0x0EDA	0x0E03      	MOVLW       3
0x0EDC	0x1453      	ANDWF       RS485Slave_Receive_rec_L0, 0 
0x0EDE	0x6E01      	MOVWF       R1 
0x0EE0	0xF056C001  	MOVFF       R1, RS485Slave_Receive_datalen_L0
;__Lib_RS485.c,109 :: 		
0x0EE4	0x5001      	MOVF        R1, 0 
0x0EE6	0x0A00      	XORLW       0
0x0EE8	0xE102      	BNZ         L_RS485Slave_Receive17
;__Lib_RS485.c,110 :: 		
0x0EEA	0x0E05      	MOVLW       5
0x0EEC	0x6E40      	MOVWF       __Lib_RS485_sl_state 
L_RS485Slave_Receive17:
;__Lib_RS485.c,111 :: 		
0x0EEE	0x0E01      	MOVLW       1
0x0EF0	0x6E54      	MOVWF       RS485Slave_Receive_i_L0 
;__Lib_RS485.c,112 :: 		
0x0EF2	0xD00B      	BRA         L_RS485Slave_Receive18
L_RS485Slave_Receive16:
;__Lib_RS485.c,114 :: 		
0x0EF4	0x0E05      	MOVLW       5
0x0EF6	0x0101      	MOVLB       1
0x0EF8	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x0EFA	0x6EE1      	MOVWF       FSR1L 
0x0EFC	0x0E00      	MOVLW       0
0x0EFE	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x0F00	0x6EE2      	MOVWF       FSR1H 
0x0F02	0x0EFF      	MOVLW       255
0x0F04	0x6EE6      	MOVWF       POSTINC1 
;__Lib_RS485.c,115 :: 		
0x0F06	0x0E01      	MOVLW       1
0x0F08	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,116 :: 		
L_RS485Slave_Receive18:
;__Lib_RS485.c,117 :: 		
0x0F0A	0xD0D5      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,119 :: 		
L_RS485Slave_Receive19:
;__Lib_RS485.c,120 :: 		
0x0F0C	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0F0E	0x0AA9      	XORLW       169
0x0F10	0xE10C      	BNZ         L_RS485Slave_Receive20
;__Lib_RS485.c,121 :: 		
0x0F12	0x0101      	MOVLB       1
0x0F14	0x0E05      	MOVLW       5
0x0F16	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x0F18	0x6EE1      	MOVWF       FSR1L 
0x0F1A	0x0E00      	MOVLW       0
0x0F1C	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x0F1E	0x6EE2      	MOVWF       FSR1H 
0x0F20	0x0EFF      	MOVLW       255
0x0F22	0x6EE6      	MOVWF       POSTINC1 
;__Lib_RS485.c,122 :: 		
0x0F24	0x0E01      	MOVLW       1
0x0F26	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,123 :: 		
0x0F28	0xD0C6      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,124 :: 		
L_RS485Slave_Receive20:
;__Lib_RS485.c,125 :: 		
0x0F2A	0x5054      	MOVF        RS485Slave_Receive_i_L0, 0 
0x0F2C	0x5C56      	SUBWF       RS485Slave_Receive_datalen_L0, 0 
0x0F2E	0x6E00      	MOVWF       R0 
0x0F30	0x6A01      	CLRF        R1 
0x0F32	0x0E00      	MOVLW       0
0x0F34	0x5A01      	SUBWFB      R1, 1 
0x0F36	0x5000      	MOVF        R0, 0 
0x0F38	0x1001      	IORWF       R1, 0 
0x0F3A	0xE012      	BZ          L_RS485Slave_Receive21
;__Lib_RS485.c,126 :: 		
0x0F3C	0x0101      	MOVLB       1
0x0F3E	0x0454      	DECF        RS485Slave_Receive_i_L0, 0 
0x0F40	0x6E00      	MOVWF       R0 
0x0F42	0x6A01      	CLRF        R1 
0x0F44	0x0E00      	MOVLW       0
0x0F46	0x5A01      	SUBWFB      R1, 1 
0x0F48	0x5000      	MOVF        R0, 0 
0x0F4A	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x0F4C	0x6EE1      	MOVWF       FSR1L 
0x0F4E	0x5001      	MOVF        R1, 0 
0x0F50	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x0F52	0x6EE2      	MOVWF       FSR1H 
0x0F54	0xFFE6C053  	MOVFF       RS485Slave_Receive_rec_L0, POSTINC1
;__Lib_RS485.c,127 :: 		
0x0F58	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0F5A	0x1A52      	XORWF       RS485Slave_Receive_crc_is_ok_L0, 1 
;__Lib_RS485.c,128 :: 		
0x0F5C	0x2A54      	INCF        RS485Slave_Receive_i_L0, 1 
;__Lib_RS485.c,129 :: 		
0x0F5E	0xD012      	BRA         L_RS485Slave_Receive22
L_RS485Slave_Receive21:
0x0F60	0x0101      	MOVLB       1
;__Lib_RS485.c,131 :: 		
0x0F62	0x0454      	DECF        RS485Slave_Receive_i_L0, 0 
0x0F64	0x6E00      	MOVWF       R0 
0x0F66	0x6A01      	CLRF        R1 
0x0F68	0x0E00      	MOVLW       0
0x0F6A	0x5A01      	SUBWFB      R1, 1 
0x0F6C	0x5000      	MOVF        R0, 0 
0x0F6E	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x0F70	0x6EE1      	MOVWF       FSR1L 
0x0F72	0x5001      	MOVF        R1, 0 
0x0F74	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x0F76	0x6EE2      	MOVWF       FSR1H 
0x0F78	0xFFE6C053  	MOVFF       RS485Slave_Receive_rec_L0, POSTINC1
;__Lib_RS485.c,132 :: 		
0x0F7C	0x0E05      	MOVLW       5
0x0F7E	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,133 :: 		
0x0F80	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0F82	0x1A52      	XORWF       RS485Slave_Receive_crc_is_ok_L0, 1 
;__Lib_RS485.c,134 :: 		
L_RS485Slave_Receive22:
;__Lib_RS485.c,135 :: 		
0x0F84	0xD098      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,137 :: 		
L_RS485Slave_Receive23:
;__Lib_RS485.c,138 :: 		
0x0F86	0x1C52      	COMF        RS485Slave_Receive_crc_is_ok_L0, 0 
0x0F88	0x6E01      	MOVWF       R1 
0x0F8A	0xF052C001  	MOVFF       R1, RS485Slave_Receive_crc_is_ok_L0
;__Lib_RS485.c,139 :: 		
0x0F8E	0x5001      	MOVF        R1, 0 
0x0F90	0x0A96      	XORLW       150
0x0F92	0xE004      	BZ          L__RS485Slave_Receive105
0x0F94	0x5052      	MOVF        RS485Slave_Receive_crc_is_ok_L0, 0 
0x0F96	0x0AA9      	XORLW       169
0x0F98	0xE001      	BZ          L__RS485Slave_Receive105
0x0F9A	0xD001      	BRA         L_RS485Slave_Receive26
L__RS485Slave_Receive105:
;__Lib_RS485.c,140 :: 		
0x0F9C	0x2A52      	INCF        RS485Slave_Receive_crc_is_ok_L0, 1 
L_RS485Slave_Receive26:
;__Lib_RS485.c,141 :: 		
0x0F9E	0x5052      	MOVF        RS485Slave_Receive_crc_is_ok_L0, 0 
0x0FA0	0x1853      	XORWF       RS485Slave_Receive_rec_L0, 0 
0x0FA2	0xE103      	BNZ         L_RS485Slave_Receive27
;__Lib_RS485.c,142 :: 		
0x0FA4	0x0E06      	MOVLW       6
0x0FA6	0x6E40      	MOVWF       __Lib_RS485_sl_state 
0x0FA8	0xD00B      	BRA         L_RS485Slave_Receive28
L_RS485Slave_Receive27:
0x0FAA	0x0101      	MOVLB       1
;__Lib_RS485.c,144 :: 		
0x0FAC	0x0E05      	MOVLW       5
0x0FAE	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x0FB0	0x6EE1      	MOVWF       FSR1L 
0x0FB2	0x0E00      	MOVLW       0
0x0FB4	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x0FB6	0x6EE2      	MOVWF       FSR1H 
0x0FB8	0x0EFF      	MOVLW       255
0x0FBA	0x6EE6      	MOVWF       POSTINC1 
;__Lib_RS485.c,145 :: 		
0x0FBC	0x0E01      	MOVLW       1
0x0FBE	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,146 :: 		
L_RS485Slave_Receive28:
;__Lib_RS485.c,147 :: 		
0x0FC0	0xD07A      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,149 :: 		
L_RS485Slave_Receive29:
;__Lib_RS485.c,150 :: 		
0x0FC2	0x5053      	MOVF        RS485Slave_Receive_rec_L0, 0 
0x0FC4	0x0AA9      	XORLW       169
0x0FC6	0xE141      	BNZ         L_RS485Slave_Receive30
;__Lib_RS485.c,151 :: 		
0x0FC8	0x0101      	MOVLB       1
0x0FCA	0x0E01      	MOVLW       1
0x0FCC	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,152 :: 		
0x0FCE	0x0E04      	MOVLW       4
0x0FD0	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x0FD2	0x6EE1      	MOVWF       FSR1L 
0x0FD4	0x0E00      	MOVLW       0
0x0FD6	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x0FD8	0x6EE2      	MOVWF       FSR1H 
0x0FDA	0x0EFF      	MOVLW       255
0x0FDC	0x6EE6      	MOVWF       POSTINC1 
;__Lib_RS485.c,153 :: 		
0x0FDE	0x0E03      	MOVLW       3
0x0FE0	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x0FE2	0x6EE1      	MOVWF       FSR1L 
0x0FE4	0x0E00      	MOVLW       0
0x0FE6	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x0FE8	0x6EE2      	MOVWF       FSR1H 
0x0FEA	0xFFE6C056  	MOVFF       RS485Slave_Receive_datalen_L0, POSTINC1
;__Lib_RS485.c,154 :: 		
0x0FEE	0x0E01      	MOVLW       1
0x0FF0	0x6E54      	MOVWF       RS485Slave_Receive_i_L0 
L_RS485Slave_Receive31:
0x0FF2	0x5054      	MOVF        RS485Slave_Receive_i_L0, 0 
0x0FF4	0x5C56      	SUBWF       RS485Slave_Receive_datalen_L0, 0 
0x0FF6	0xE328      	BNC         L_RS485Slave_Receive32
;__Lib_RS485.c,156 :: 		
0x0FF8	0xF001C054  	MOVFF       RS485Slave_Receive_i_L0, R1
0x0FFC	0x0E02      	MOVLW       2
0x0FFE	0x6E00      	MOVWF       R0 
0x1000	0x5001      	MOVF        R1, 0 
L__RS485Slave_Receive117:
0x1002	0xE004      	BZ          L__RS485Slave_Receive118
0x1004	0x3600      	RLCF        R0, 1 
0x1006	0x9000      	BCF         R0, 0 
0x1008	0x0FFF      	ADDLW       255
0x100A	0xD7FB      	BRA         L__RS485Slave_Receive117
L__RS485Slave_Receive118:
;__Lib_RS485.c,157 :: 		
0x100C	0x5055      	MOVF        RS485Slave_Receive_key_L0, 0 
0x100E	0x1600      	ANDWF       R0, 1 
0x1010	0xE019      	BZ          L_RS485Slave_Receive34
;__Lib_RS485.c,158 :: 		
0x1012	0x0101      	MOVLB       1
0x1014	0x0454      	DECF        RS485Slave_Receive_i_L0, 0 
0x1016	0x6E00      	MOVWF       R0 
0x1018	0x6A01      	CLRF        R1 
0x101A	0x0E00      	MOVLW       0
0x101C	0x5A01      	SUBWFB      R1, 1 
0x101E	0x5000      	MOVF        R0, 0 
0x1020	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x1022	0x6E02      	MOVWF       R2 
0x1024	0x5001      	MOVF        R1, 0 
0x1026	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x1028	0x6E03      	MOVWF       R3 
0x102A	0xFFE9C002  	MOVFF       R2, FSR0L
0x102E	0xFFEAC003  	MOVFF       R3, FSR0H
0x1032	0x0E01      	MOVLW       1
0x1034	0x18EE      	XORWF       POSTINC0, 0 
0x1036	0x6E00      	MOVWF       R0 
0x1038	0xFFE1C002  	MOVFF       R2, FSR1L
0x103C	0xFFE2C003  	MOVFF       R3, FSR1H
0x1040	0xFFE6C000  	MOVFF       R0, POSTINC1
L_RS485Slave_Receive34:
;__Lib_RS485.c,154 :: 		
0x1044	0x2A54      	INCF        RS485Slave_Receive_i_L0, 1 
;__Lib_RS485.c,159 :: 		
0x1046	0xD7D5      	BRA         L_RS485Slave_Receive31
L_RS485Slave_Receive32:
;__Lib_RS485.c,160 :: 		
0x1048	0xD00B      	BRA         L_RS485Slave_Receive35
L_RS485Slave_Receive30:
0x104A	0x0101      	MOVLB       1
;__Lib_RS485.c,163 :: 		
0x104C	0x0E05      	MOVLW       5
0x104E	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x1050	0x6EE1      	MOVWF       FSR1L 
0x1052	0x0E00      	MOVLW       0
0x1054	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x1056	0x6EE2      	MOVWF       FSR1H 
0x1058	0x0EFF      	MOVLW       255
0x105A	0x6EE6      	MOVWF       POSTINC1 
;__Lib_RS485.c,164 :: 		
0x105C	0x0E01      	MOVLW       1
0x105E	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,165 :: 		
L_RS485Slave_Receive35:
;__Lib_RS485.c,166 :: 		
0x1060	0xD02A      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,168 :: 		
L_RS485Slave_Receive36:
0x1062	0x0101      	MOVLB       1
;__Lib_RS485.c,169 :: 		
0x1064	0x0E05      	MOVLW       5
0x1066	0x2565      	ADDWF       FARG_RS485Slave_Receive_data_buffer, 0, 1
0x1068	0x6EE1      	MOVWF       FSR1L 
0x106A	0x0E00      	MOVLW       0
0x106C	0x2166      	ADDWFC      FARG_RS485Slave_Receive_data_buffer+1, 0, 1
0x106E	0x6EE2      	MOVWF       FSR1H 
0x1070	0x0EFF      	MOVLW       255
0x1072	0x6EE6      	MOVWF       POSTINC1 
;__Lib_RS485.c,170 :: 		
0x1074	0x0E01      	MOVLW       1
0x1076	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,171 :: 		
0x1078	0xD01E      	BRA         L_RS485Slave_Receive5
;__Lib_RS485.c,173 :: 		
L_RS485Slave_Receive37:
;__Lib_RS485.c,174 :: 		
0x107A	0x0E01      	MOVLW       1
0x107C	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,176 :: 		
0x107E	0xD01B      	BRA         L_RS485Slave_Receive5
L_RS485Slave_Receive4:
0x1080	0x5040      	MOVF        __Lib_RS485_sl_state, 0 
0x1082	0x0A01      	XORLW       1
0x1084	0xB4D8      	BTFSC       STATUS, 2 
0x1086	0xD700      	BRA         L_RS485Slave_Receive6
0x1088	0x5040      	MOVF        __Lib_RS485_sl_state, 0 
0x108A	0x0A02      	XORLW       2
0x108C	0xB4D8      	BTFSC       STATUS, 2 
0x108E	0xD703      	BRA         L_RS485Slave_Receive8
0x1090	0x5040      	MOVF        __Lib_RS485_sl_state, 0 
0x1092	0x0A03      	XORLW       3
0x1094	0xB4D8      	BTFSC       STATUS, 2 
0x1096	0xD70E      	BRA         L_RS485Slave_Receive13
0x1098	0x5040      	MOVF        __Lib_RS485_sl_state, 0 
0x109A	0x0A04      	XORLW       4
0x109C	0xB4D8      	BTFSC       STATUS, 2 
0x109E	0xD736      	BRA         L_RS485Slave_Receive19
0x10A0	0x5040      	MOVF        __Lib_RS485_sl_state, 0 
0x10A2	0x0A05      	XORLW       5
0x10A4	0xB4D8      	BTFSC       STATUS, 2 
0x10A6	0xD76F      	BRA         L_RS485Slave_Receive23
0x10A8	0x5040      	MOVF        __Lib_RS485_sl_state, 0 
0x10AA	0x0A06      	XORLW       6
0x10AC	0xE08A      	BZ          L_RS485Slave_Receive29
0x10AE	0x5040      	MOVF        __Lib_RS485_sl_state, 0 
0x10B0	0x0A07      	XORLW       7
0x10B2	0xE0D7      	BZ          L_RS485Slave_Receive36
0x10B4	0xD7E2      	BRA         L_RS485Slave_Receive37
L_RS485Slave_Receive5:
;__Lib_RS485.c,177 :: 		
L_end_RS485Slave_Receive:
0x10B6	0x0012      	RETURN      0
; end of _RS485Slave_Receive
_bloqueo:
;block.c,4 :: 		void bloqueo(void){
;block.c,5 :: 		contador++;
0x10B8	0x0101      	MOVLB       1
0x10BA	0x4B46      	INFSNZ      _contador, 1, 1
0x10BC	0x2B47      	INCF        _contador+1, 1, 1
;block.c,6 :: 		if (contador>=limit){
0x10BE	0x0E36      	MOVLW       54
0x10C0	0x5D47      	SUBWF       _contador+1, 0, 1
0x10C2	0xE102      	BNZ         L__bloqueo21
0x10C4	0x0EB0      	MOVLW       176
0x10C6	0x5D46      	SUBWF       _contador, 0, 1
L__bloqueo21:
0x10C8	0xE32B      	BNC         L_bloqueo0
;block.c,7 :: 		contador=0;
0x10CA	0x6B46      	CLRF        _contador, 1
0x10CC	0x6B47      	CLRF        _contador+1, 1
;block.c,8 :: 		if(aa+bb+cc+dd+ee<=6 && bk==1){
0x10CE	0x514B      	MOVF        _bb, 0, 1
0x10D0	0x254A      	ADDWF       _aa, 0, 1
0x10D2	0x6E00      	MOVWF       R0 
0x10D4	0x6A01      	CLRF        R1 
0x10D6	0x0E00      	MOVLW       0
0x10D8	0x2201      	ADDWFC      R1, 1 
0x10DA	0x5035      	MOVF        _cc, 0 
0x10DC	0x2600      	ADDWF       R0, 1 
0x10DE	0x0E00      	MOVLW       0
0x10E0	0x2201      	ADDWFC      R1, 1 
0x10E2	0x5036      	MOVF        _dd, 0 
0x10E4	0x2600      	ADDWF       R0, 1 
0x10E6	0x0E00      	MOVLW       0
0x10E8	0x2201      	ADDWFC      R1, 1 
0x10EA	0x5034      	MOVF        _ee, 0 
0x10EC	0x2400      	ADDWF       R0, 0 
0x10EE	0x6E02      	MOVWF       R2 
0x10F0	0x0E00      	MOVLW       0
0x10F2	0x2001      	ADDWFC      R1, 0 
0x10F4	0x6E03      	MOVWF       R3 
0x10F6	0x0E80      	MOVLW       128
0x10F8	0x6E00      	MOVWF       R0 
0x10FA	0x0E80      	MOVLW       128
0x10FC	0x1803      	XORWF       R3, 0 
0x10FE	0x5C00      	SUBWF       R0, 0 
0x1100	0xE102      	BNZ         L__bloqueo22
0x1102	0x5002      	MOVF        R2, 0 
0x1104	0x0806      	SUBLW       6
L__bloqueo22:
0x1106	0xE30C      	BNC         L_bloqueo3
0x1108	0xA032      	BTFSS       _bk, BitPos(_bk+0) 
0x110A	0xD00A      	BRA         L_bloqueo3
L__bloqueo19:
;block.c,9 :: 		contador_seg++;
0x110C	0x2A33      	INCF        _contador_seg, 1 
;block.c,10 :: 		if(contador_seg==5){
0x110E	0x5033      	MOVF        _contador_seg, 0 
0x1110	0x0A05      	XORLW       5
0x1112	0xE106      	BNZ         L_bloqueo4
;block.c,11 :: 		BLOQUEOS++;
0x1114	0x0E01      	MOVLW       1
0x1116	0x2637      	ADDWF       _BLOQUEOS, 1 
0x1118	0x0E00      	MOVLW       0
0x111A	0x2238      	ADDWFC      _BLOQUEOS+1, 1 
0x111C	0x2239      	ADDWFC      _BLOQUEOS+2, 1 
0x111E	0x223A      	ADDWFC      _BLOQUEOS+3, 1 
;block.c,12 :: 		}
L_bloqueo4:
;block.c,13 :: 		}
L_bloqueo3:
;block.c,14 :: 		}
L_bloqueo0:
;block.c,16 :: 		if((contador==0 || contador==(limit*0.5)) && (contador_seg>=5)){
0x1120	0x0E00      	MOVLW       0
0x1122	0x1947      	XORWF       _contador+1, 0, 1
0x1124	0xE102      	BNZ         L__bloqueo23
0x1126	0x0E00      	MOVLW       0
0x1128	0x1946      	XORWF       _contador, 0, 1
L__bloqueo23:
0x112A	0xE016      	BZ          L__bloqueo18
0x112C	0xF000C146  	MOVFF       _contador, R0
0x1130	0xF001C147  	MOVFF       _contador+1, R1
0x1134	0xF004EC7B  	CALL        _word2double, 0
0x1138	0x0E00      	MOVLW       0
0x113A	0x6E04      	MOVWF       R4 
0x113C	0x0EC0      	MOVLW       192
0x113E	0x6E05      	MOVWF       R5 
0x1140	0x0E5A      	MOVLW       90
0x1142	0x6E06      	MOVWF       R6 
0x1144	0x0E8B      	MOVLW       139
0x1146	0x6E07      	MOVWF       R7 
0x1148	0xDC66      	RCALL       _Equals_Double
0x114A	0x0E01      	MOVLW       1
0x114C	0xA4D8      	BTFSS       STATUS, 2 
0x114E	0x0E00      	MOVLW       0
0x1150	0x6E00      	MOVWF       R0 
0x1152	0x5200      	MOVF        R0, 1 
0x1154	0xE101      	BNZ         L__bloqueo18
0x1156	0xD004      	BRA         L_bloqueo9
L__bloqueo18:
0x1158	0x0E05      	MOVLW       5
0x115A	0x5C33      	SUBWF       _contador_seg, 0 
0x115C	0xB0D8      	BTFSC       STATUS, 0 
L__bloqueo17:
;block.c,17 :: 		BUZZER=0;
0x115E	0x9A83      	BCF         PORTD, 5 
;block.c,18 :: 		}
L_bloqueo9:
;block.c,20 :: 		if((contador==(limit*0.17) || contador==(limit*0.67)) && (contador_seg>=5)){
0x1160	0xF000C146  	MOVFF       _contador, R0
0x1164	0xF001C147  	MOVFF       _contador+1, R1
0x1168	0xF004EC7B  	CALL        _word2double, 0
0x116C	0x0E00      	MOVLW       0
0x116E	0x6E04      	MOVWF       R4 
0x1170	0x0EC0      	MOVLW       192
0x1172	0x6E05      	MOVWF       R5 
0x1174	0x0E14      	MOVLW       20
0x1176	0x6E06      	MOVWF       R6 
0x1178	0x0E8A      	MOVLW       138
0x117A	0x6E07      	MOVWF       R7 
0x117C	0xDC4C      	RCALL       _Equals_Double
0x117E	0x0E01      	MOVLW       1
0x1180	0xA4D8      	BTFSS       STATUS, 2 
0x1182	0x0E00      	MOVLW       0
0x1184	0x6E00      	MOVWF       R0 
0x1186	0x5200      	MOVF        R0, 1 
0x1188	0xE116      	BNZ         L__bloqueo16
0x118A	0xF000C146  	MOVFF       _contador, R0
0x118E	0xF001C147  	MOVFF       _contador+1, R1
0x1192	0xF004EC7B  	CALL        _word2double, 0
0x1196	0x0E00      	MOVLW       0
0x1198	0x6E04      	MOVWF       R4 
0x119A	0x0E90      	MOVLW       144
0x119C	0x6E05      	MOVWF       R5 
0x119E	0x0E12      	MOVLW       18
0x11A0	0x6E06      	MOVWF       R6 
0x11A2	0x0E8C      	MOVLW       140
0x11A4	0x6E07      	MOVWF       R7 
0x11A6	0xDC37      	RCALL       _Equals_Double
0x11A8	0x0E01      	MOVLW       1
0x11AA	0xA4D8      	BTFSS       STATUS, 2 
0x11AC	0x0E00      	MOVLW       0
0x11AE	0x6E00      	MOVWF       R0 
0x11B0	0x5200      	MOVF        R0, 1 
0x11B2	0xE101      	BNZ         L__bloqueo16
0x11B4	0xD004      	BRA         L_bloqueo14
L__bloqueo16:
0x11B6	0x0E05      	MOVLW       5
0x11B8	0x5C33      	SUBWF       _contador_seg, 0 
0x11BA	0xB0D8      	BTFSC       STATUS, 0 
L__bloqueo15:
;block.c,21 :: 		BUZZER=1;
0x11BC	0x8A83      	BSF         PORTD, 5 
;block.c,22 :: 		}
L_bloqueo14:
;block.c,23 :: 		}
L_end_bloqueo:
0x11BE	0x0012      	RETURN      0
; end of _bloqueo
_indicadorOcupado:
;barras4.c,93 :: 		void indicadorOcupado()
;barras4.c,102 :: 		PORTB.B1 = ~PORTB.B1;
0x11C0	0x7281      	BTG         PORTB, 1 
;barras4.c,103 :: 		}
L_end_indicadorOcupado:
0x11C2	0x0012      	RETURN      0
; end of _indicadorOcupado
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x11C4	0x0E58      	MOVLW       _UART1_Write
0x11C6	0x6E4A      	MOVWF       _UART_Wr_Ptr 
0x11C8	0x0E00      	MOVLW       hi_addr(_UART1_Write)
0x11CA	0x6E4B      	MOVWF       _UART_Wr_Ptr+1 
0x11CC	0x0E64      	MOVLW       FARG_UART1_Write_data_
0x11CE	0x6E4C      	MOVWF       _UART_Wr_Ptr+2 
0x11D0	0x0E01      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x11D2	0x6E4D      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67.c,19 :: 		
0x11D4	0x0E78      	MOVLW       _UART1_Read
0x11D6	0x6E41      	MOVWF       _UART_Rd_Ptr 
0x11D8	0x0E00      	MOVLW       hi_addr(_UART1_Read)
0x11DA	0x6E42      	MOVWF       _UART_Rd_Ptr+1 
0x11DC	0x0E00      	MOVLW       0
0x11DE	0x6E43      	MOVWF       _UART_Rd_Ptr+2 
0x11E0	0x0E00      	MOVLW       0
0x11E2	0x6E44      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67.c,20 :: 		
0x11E4	0x0E94      	MOVLW       _UART1_Data_Ready
0x11E6	0x6E4E      	MOVWF       _UART_Rdy_Ptr 
0x11E8	0x0E00      	MOVLW       hi_addr(_UART1_Data_Ready)
0x11EA	0x6E4F      	MOVWF       _UART_Rdy_Ptr+1 
0x11EC	0x0E00      	MOVLW       0
0x11EE	0x6E50      	MOVWF       _UART_Rdy_Ptr+2 
0x11F0	0x0E00      	MOVLW       0
0x11F2	0x6E51      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67.c,21 :: 		
0x11F4	0x0E8A      	MOVLW       _UART1_Tx_Idle
0x11F6	0x6E45      	MOVWF       _UART_Tx_Idle_Ptr 
0x11F8	0x0E00      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x11FA	0x6E46      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x11FC	0x0E00      	MOVLW       0
0x11FE	0x6E47      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x1200	0x0E00      	MOVLW       0
0x1202	0x6E48      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67.c,23 :: 		
0x1204	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x1206	0x0E90      	MOVLW       144
0x1208	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x120A	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67.c,26 :: 		
0x120C	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x120E	0xAA9E      	BTFSS       PIR1, 5 
0x1210	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x1212	0xF000CFAE  	MOVFF       RCREG, R0
0x1216	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Init:
0x1218	0x0012      	RETURN      0
; end of _UART1_Init
_detect:
;detect.c,3 :: 		void detect(void){
;detect.c,5 :: 		unsigned short int j1 = 0;
0x121A	0x0101      	MOVLB       1
0x121C	0x6B4C      	CLRF        detect_j1_L0, 1
0x121E	0x6B4D      	CLRF        detect_j2_L0, 1
0x1220	0x6B4E      	CLRF        detect_j3_L0, 1
;detect.c,9 :: 		if (PORTD.B7)
0x1222	0xAE83      	BTFSS       PORTD, 7 
0x1224	0xD000      	BRA         L_detect0
;detect.c,24 :: 		}
L_detect0:
;detect.c,26 :: 		if(!OPTO)
0x1226	0xB484      	BTFSC       PORTE, 2 
0x1228	0xD000      	BRA         L_detect1
;detect.c,31 :: 		}
L_detect1:
;detect.c,35 :: 		if(DET5){
0x122A	0xAC81      	BTFSS       PORTB, 6 
0x122C	0xD014      	BRA         L_detect2
;detect.c,36 :: 		if(ee>0){ //flanco descendente : empieza a estar interrumpido
0x122E	0x5034      	MOVF        _ee, 0 
0x1230	0x0800      	SUBLW       0
0x1232	0xE210      	BC          L_detect3
;detect.c,38 :: 		if(Apy == -1){
0x1234	0x5031      	MOVF        _Apy, 0 
0x1236	0x0AFF      	XORLW       255
0x1238	0xE103      	BNZ         L_detect4
;detect.c,39 :: 		Apy=iyn;
0x123A	0xF031C03F  	MOVFF       _iyn, _Apy
;detect.c,40 :: 		iyn++;
0x123E	0x2A3F      	INCF        _iyn, 1 
;detect.c,41 :: 		}
L_detect4:
;detect.c,42 :: 		ee=0;
0x1240	0x6A34      	CLRF        _ee 
;detect.c,43 :: 		SUart0_Write('A');
0x1242	0x0E41      	MOVLW       65
0x1244	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1246	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,44 :: 		SUart0_Write('Y');
0x124A	0x0E59      	MOVLW       89
0x124C	0x0101      	MOVLB       1
0x124E	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1250	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,45 :: 		}
L_detect3:
;detect.c,46 :: 		}
0x1254	0xD037      	BRA         L_detect5
L_detect2:
;detect.c,48 :: 		if(ee==0){ // flanco ascendente : empieza a recibir luz
0x1256	0x5034      	MOVF        _ee, 0 
0x1258	0x0A00      	XORLW       0
0x125A	0xE134      	BNZ         L_detect6
;detect.c,50 :: 		Apx = ixm;
0x125C	0xF03CC05E  	MOVFF       _ixm, _Apx
;detect.c,51 :: 		ixm++;
0x1260	0x0E01      	MOVLW       1
0x1262	0x265E      	ADDWF       _ixm, 1 
0x1264	0x0E00      	MOVLW       0
0x1266	0x225F      	ADDWFC      _ixm+1, 1 
0x1268	0x2260      	ADDWFC      _ixm+2, 1 
0x126A	0x2261      	ADDWFC      _ixm+3, 1 
;detect.c,54 :: 		if(ixm >= 4294967000)
0x126C	0x0EFF      	MOVLW       255
0x126E	0x5C61      	SUBWF       _ixm+3, 0 
0x1270	0xE108      	BNZ         L__detect50
0x1272	0x0EFF      	MOVLW       255
0x1274	0x5C60      	SUBWF       _ixm+2, 0 
0x1276	0xE105      	BNZ         L__detect50
0x1278	0x0EFE      	MOVLW       254
0x127A	0x5C5F      	SUBWF       _ixm+1, 0 
0x127C	0xE102      	BNZ         L__detect50
0x127E	0x0ED8      	MOVLW       216
0x1280	0x5C5E      	SUBWF       _ixm, 0 
L__detect50:
0x1282	0xE314      	BNC         L_detect7
;detect.c,56 :: 		if(Apx > Apm)
0x1284	0x0E80      	MOVLW       128
0x1286	0x183D      	XORWF       _Apm, 0 
0x1288	0x6E00      	MOVWF       R0 
0x128A	0x0E80      	MOVLW       128
0x128C	0x183C      	XORWF       _Apx, 0 
0x128E	0x5C00      	SUBWF       R0, 0 
0x1290	0xE204      	BC          L_detect8
;detect.c,58 :: 		Apx = 1;
0x1292	0x0E01      	MOVLW       1
0x1294	0x6E3C      	MOVWF       _Apx 
;detect.c,59 :: 		Apm = 0;
0x1296	0x6A3D      	CLRF        _Apm 
;detect.c,60 :: 		}
0x1298	0xD003      	BRA         L_detect9
L_detect8:
;detect.c,63 :: 		Apx = 0;
0x129A	0x6A3C      	CLRF        _Apx 
;detect.c,64 :: 		Apm = 1;
0x129C	0x0E01      	MOVLW       1
0x129E	0x6E3D      	MOVWF       _Apm 
;detect.c,65 :: 		}
L_detect9:
;detect.c,66 :: 		ixm = 2;
0x12A0	0x0E02      	MOVLW       2
0x12A2	0x6E5E      	MOVWF       _ixm 
0x12A4	0x0E00      	MOVLW       0
0x12A6	0x6E5F      	MOVWF       _ixm+1 
0x12A8	0x6E60      	MOVWF       _ixm+2 
0x12AA	0x6E61      	MOVWF       _ixm+3 
;detect.c,67 :: 		}
L_detect7:
;detect.c,69 :: 		ee = 1;
0x12AC	0x0E01      	MOVLW       1
0x12AE	0x6E34      	MOVWF       _ee 
;detect.c,70 :: 		SUart0_Write('A');
0x12B0	0x0E41      	MOVLW       65
0x12B2	0x0101      	MOVLB       1
0x12B4	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x12B6	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,71 :: 		SUart0_Write('X');
0x12BA	0x0E58      	MOVLW       88
0x12BC	0x0101      	MOVLB       1
0x12BE	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x12C0	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,72 :: 		}
L_detect6:
;detect.c,73 :: 		}
L_detect5:
;detect.c,75 :: 		if(DET4){
0x12C4	0xAE81      	BTFSS       PORTB, 7 
0x12C6	0xD015      	BRA         L_detect10
;detect.c,76 :: 		if(dd>0){ //flanco descendente : empieza a estar bloqueado
0x12C8	0x5036      	MOVF        _dd, 0 
0x12CA	0x0800      	SUBLW       0
0x12CC	0xE211      	BC          L_detect11
;detect.c,78 :: 		if(Apn == -1){
0x12CE	0x503B      	MOVF        _Apn, 0 
0x12D0	0x0AFF      	XORLW       255
0x12D2	0xE103      	BNZ         L_detect12
;detect.c,79 :: 		Apn = iyn;
0x12D4	0xF03BC03F  	MOVFF       _iyn, _Apn
;detect.c,80 :: 		iyn++;
0x12D8	0x2A3F      	INCF        _iyn, 1 
;detect.c,81 :: 		}
L_detect12:
;detect.c,82 :: 		dd=0;
0x12DA	0x6A36      	CLRF        _dd 
;detect.c,83 :: 		SUart0_Write('A');
0x12DC	0x0E41      	MOVLW       65
0x12DE	0x0101      	MOVLB       1
0x12E0	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x12E2	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,84 :: 		SUart0_Write('N');
0x12E6	0x0E4E      	MOVLW       78
0x12E8	0x0101      	MOVLB       1
0x12EA	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x12EC	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,85 :: 		}
L_detect11:
;detect.c,86 :: 		}
0x12F0	0xD039      	BRA         L_detect13
L_detect10:
;detect.c,88 :: 		if(dd==0){ // flanco ascendente : empieza a recibir luz
0x12F2	0x5036      	MOVF        _dd, 0 
0x12F4	0x0A00      	XORLW       0
0x12F6	0xE136      	BNZ         L_detect14
;detect.c,90 :: 		Apm = ixm * sumi;
0x12F8	0x505E      	MOVF        _ixm, 0 
0x12FA	0x0258      	MULWF       _sumi 
0x12FC	0xF03DCFF3  	MOVFF       PRODL, _Apm
;detect.c,91 :: 		ixm++;
0x1300	0x0E01      	MOVLW       1
0x1302	0x265E      	ADDWF       _ixm, 1 
0x1304	0x0E00      	MOVLW       0
0x1306	0x225F      	ADDWFC      _ixm+1, 1 
0x1308	0x2260      	ADDWFC      _ixm+2, 1 
0x130A	0x2261      	ADDWFC      _ixm+3, 1 
;detect.c,94 :: 		if(ixm >= 4294967000)
0x130C	0x0EFF      	MOVLW       255
0x130E	0x5C61      	SUBWF       _ixm+3, 0 
0x1310	0xE108      	BNZ         L__detect51
0x1312	0x0EFF      	MOVLW       255
0x1314	0x5C60      	SUBWF       _ixm+2, 0 
0x1316	0xE105      	BNZ         L__detect51
0x1318	0x0EFE      	MOVLW       254
0x131A	0x5C5F      	SUBWF       _ixm+1, 0 
0x131C	0xE102      	BNZ         L__detect51
0x131E	0x0ED8      	MOVLW       216
0x1320	0x5C5E      	SUBWF       _ixm, 0 
L__detect51:
0x1322	0xE314      	BNC         L_detect15
;detect.c,96 :: 		if(Apx > Apm)
0x1324	0x0E80      	MOVLW       128
0x1326	0x183D      	XORWF       _Apm, 0 
0x1328	0x6E00      	MOVWF       R0 
0x132A	0x0E80      	MOVLW       128
0x132C	0x183C      	XORWF       _Apx, 0 
0x132E	0x5C00      	SUBWF       R0, 0 
0x1330	0xE204      	BC          L_detect16
;detect.c,98 :: 		Apx = 1;
0x1332	0x0E01      	MOVLW       1
0x1334	0x6E3C      	MOVWF       _Apx 
;detect.c,99 :: 		Apm = 0;
0x1336	0x6A3D      	CLRF        _Apm 
;detect.c,100 :: 		}
0x1338	0xD003      	BRA         L_detect17
L_detect16:
;detect.c,103 :: 		Apx = 0;
0x133A	0x6A3C      	CLRF        _Apx 
;detect.c,104 :: 		Apm = 1;
0x133C	0x0E01      	MOVLW       1
0x133E	0x6E3D      	MOVWF       _Apm 
;detect.c,105 :: 		}
L_detect17:
;detect.c,106 :: 		ixm = 2;
0x1340	0x0E02      	MOVLW       2
0x1342	0x6E5E      	MOVWF       _ixm 
0x1344	0x0E00      	MOVLW       0
0x1346	0x6E5F      	MOVWF       _ixm+1 
0x1348	0x6E60      	MOVWF       _ixm+2 
0x134A	0x6E61      	MOVWF       _ixm+3 
;detect.c,107 :: 		}
L_detect15:
;detect.c,108 :: 		dd = 1;
0x134C	0x0E01      	MOVLW       1
0x134E	0x6E36      	MOVWF       _dd 
;detect.c,109 :: 		SUart0_Write('A');
0x1350	0x0E41      	MOVLW       65
0x1352	0x0101      	MOVLB       1
0x1354	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1356	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,110 :: 		SUart0_Write('M');
0x135A	0x0E4D      	MOVLW       77
0x135C	0x0101      	MOVLB       1
0x135E	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1360	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,111 :: 		}
L_detect14:
;detect.c,112 :: 		}
L_detect13:
;detect.c,114 :: 		if(DET3){
0x1364	0xA284      	BTFSS       PORTE, 1 
0x1366	0xD015      	BRA         L_detect18
;detect.c,115 :: 		if(cc>0){ //flanco descendente : empieza a estar bloqueado
0x1368	0x5035      	MOVF        _cc, 0 
0x136A	0x0800      	SUBLW       0
0x136C	0xE211      	BC          L_detect19
;detect.c,117 :: 		if(Bpy == -1){
0x136E	0x501E      	MOVF        _Bpy, 0 
0x1370	0x0AFF      	XORLW       255
0x1372	0xE103      	BNZ         L_detect20
;detect.c,118 :: 		Bpy=jyn;
0x1374	0xF01EC062  	MOVFF       _jyn, _Bpy
;detect.c,119 :: 		jyn++;
0x1378	0x2A62      	INCF        _jyn, 1 
;detect.c,120 :: 		}
L_detect20:
;detect.c,121 :: 		cc=0;
0x137A	0x6A35      	CLRF        _cc 
;detect.c,122 :: 		SUart0_Write('B');
0x137C	0x0E42      	MOVLW       66
0x137E	0x0101      	MOVLB       1
0x1380	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1382	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,123 :: 		SUart0_Write('Y');
0x1386	0x0E59      	MOVLW       89
0x1388	0x0101      	MOVLB       1
0x138A	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x138C	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,124 :: 		}
L_detect19:
;detect.c,125 :: 		}
0x1390	0xD037      	BRA         L_detect21
L_detect18:
;detect.c,127 :: 		if(cc==0){ // flanco ascendente : empieza a recibir luz
0x1392	0x5035      	MOVF        _cc, 0 
0x1394	0x0A00      	XORLW       0
0x1396	0xE134      	BNZ         L_detect22
;detect.c,129 :: 		Bpx = jxm;
0x1398	0xF01DC05A  	MOVFF       _jxm, _Bpx
;detect.c,130 :: 		jxm++;
0x139C	0x0E01      	MOVLW       1
0x139E	0x265A      	ADDWF       _jxm, 1 
0x13A0	0x0E00      	MOVLW       0
0x13A2	0x225B      	ADDWFC      _jxm+1, 1 
0x13A4	0x225C      	ADDWFC      _jxm+2, 1 
0x13A6	0x225D      	ADDWFC      _jxm+3, 1 
;detect.c,133 :: 		if(jxm > 4294967000)
0x13A8	0x505D      	MOVF        _jxm+3, 0 
0x13AA	0x08FF      	SUBLW       255
0x13AC	0xE108      	BNZ         L__detect52
0x13AE	0x505C      	MOVF        _jxm+2, 0 
0x13B0	0x08FF      	SUBLW       255
0x13B2	0xE105      	BNZ         L__detect52
0x13B4	0x505B      	MOVF        _jxm+1, 0 
0x13B6	0x08FE      	SUBLW       254
0x13B8	0xE102      	BNZ         L__detect52
0x13BA	0x505A      	MOVF        _jxm, 0 
0x13BC	0x08D8      	SUBLW       216
L__detect52:
0x13BE	0xE214      	BC          L_detect23
;detect.c,135 :: 		if(Bpx > Bpm)
0x13C0	0x0E80      	MOVLW       128
0x13C2	0x1821      	XORWF       _Bpm, 0 
0x13C4	0x6E00      	MOVWF       R0 
0x13C6	0x0E80      	MOVLW       128
0x13C8	0x181D      	XORWF       _Bpx, 0 
0x13CA	0x5C00      	SUBWF       R0, 0 
0x13CC	0xE204      	BC          L_detect24
;detect.c,137 :: 		Bpx = 1;
0x13CE	0x0E01      	MOVLW       1
0x13D0	0x6E1D      	MOVWF       _Bpx 
;detect.c,138 :: 		Bpm = 0;
0x13D2	0x6A21      	CLRF        _Bpm 
;detect.c,139 :: 		}
0x13D4	0xD003      	BRA         L_detect25
L_detect24:
;detect.c,142 :: 		Bpx = 0;
0x13D6	0x6A1D      	CLRF        _Bpx 
;detect.c,143 :: 		Bpm = 1;
0x13D8	0x0E01      	MOVLW       1
0x13DA	0x6E21      	MOVWF       _Bpm 
;detect.c,144 :: 		}
L_detect25:
;detect.c,145 :: 		jxm = 2;
0x13DC	0x0E02      	MOVLW       2
0x13DE	0x6E5A      	MOVWF       _jxm 
0x13E0	0x0E00      	MOVLW       0
0x13E2	0x6E5B      	MOVWF       _jxm+1 
0x13E4	0x6E5C      	MOVWF       _jxm+2 
0x13E6	0x6E5D      	MOVWF       _jxm+3 
;detect.c,147 :: 		}
L_detect23:
;detect.c,148 :: 		cc = 1;
0x13E8	0x0E01      	MOVLW       1
0x13EA	0x6E35      	MOVWF       _cc 
;detect.c,149 :: 		SUart0_Write('B');
0x13EC	0x0E42      	MOVLW       66
0x13EE	0x0101      	MOVLB       1
0x13F0	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x13F2	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,150 :: 		SUart0_Write('X');
0x13F6	0x0E58      	MOVLW       88
0x13F8	0x0101      	MOVLB       1
0x13FA	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x13FC	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,151 :: 		}
L_detect22:
;detect.c,152 :: 		}
L_detect21:
;detect.c,154 :: 		if(DET2){
0x1400	0xA680      	BTFSS       PORTA, 3 
0x1402	0xD015      	BRA         L_detect26
;detect.c,155 :: 		if(bb>0){ //flanco descendente : empieza a estar bloqueado
0x1404	0x0101      	MOVLB       1
0x1406	0x514B      	MOVF        _bb, 0, 1
0x1408	0x0800      	SUBLW       0
0x140A	0xE210      	BC          L_detect27
;detect.c,157 :: 		if(Bpn == -1){
0x140C	0x501F      	MOVF        _Bpn, 0 
0x140E	0x0AFF      	XORLW       255
0x1410	0xE103      	BNZ         L_detect28
;detect.c,158 :: 		Bpn = jyn;
0x1412	0xF01FC062  	MOVFF       _jyn, _Bpn
;detect.c,159 :: 		jyn++;
0x1416	0x2A62      	INCF        _jyn, 1 
;detect.c,160 :: 		}
L_detect28:
;detect.c,161 :: 		bb=0;
0x1418	0x6B4B      	CLRF        _bb, 1
;detect.c,162 :: 		SUart0_Write('B');
0x141A	0x0E42      	MOVLW       66
0x141C	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x141E	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,163 :: 		SUart0_Write('N');
0x1422	0x0E4E      	MOVLW       78
0x1424	0x0101      	MOVLB       1
0x1426	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1428	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,164 :: 		}
L_detect27:
;detect.c,165 :: 		}
0x142C	0xD03A      	BRA         L_detect29
L_detect26:
;detect.c,167 :: 		if(bb==0){ // flanco ascendente : empieza a recibir luz
0x142E	0x0101      	MOVLB       1
0x1430	0x514B      	MOVF        _bb, 0, 1
0x1432	0x0A00      	XORLW       0
0x1434	0xE136      	BNZ         L_detect30
;detect.c,169 :: 		Bpm = jxm * sumj;
0x1436	0x505A      	MOVF        _jxm, 0 
0x1438	0x0259      	MULWF       _sumj 
0x143A	0xF021CFF3  	MOVFF       PRODL, _Bpm
;detect.c,170 :: 		jxm++;
0x143E	0x0E01      	MOVLW       1
0x1440	0x265A      	ADDWF       _jxm, 1 
0x1442	0x0E00      	MOVLW       0
0x1444	0x225B      	ADDWFC      _jxm+1, 1 
0x1446	0x225C      	ADDWFC      _jxm+2, 1 
0x1448	0x225D      	ADDWFC      _jxm+3, 1 
;detect.c,173 :: 		if(jxm > 4294967000)
0x144A	0x505D      	MOVF        _jxm+3, 0 
0x144C	0x08FF      	SUBLW       255
0x144E	0xE108      	BNZ         L__detect53
0x1450	0x505C      	MOVF        _jxm+2, 0 
0x1452	0x08FF      	SUBLW       255
0x1454	0xE105      	BNZ         L__detect53
0x1456	0x505B      	MOVF        _jxm+1, 0 
0x1458	0x08FE      	SUBLW       254
0x145A	0xE102      	BNZ         L__detect53
0x145C	0x505A      	MOVF        _jxm, 0 
0x145E	0x08D8      	SUBLW       216
L__detect53:
0x1460	0xE214      	BC          L_detect31
;detect.c,175 :: 		if(Bpx > Bpm)
0x1462	0x0E80      	MOVLW       128
0x1464	0x1821      	XORWF       _Bpm, 0 
0x1466	0x6E00      	MOVWF       R0 
0x1468	0x0E80      	MOVLW       128
0x146A	0x181D      	XORWF       _Bpx, 0 
0x146C	0x5C00      	SUBWF       R0, 0 
0x146E	0xE204      	BC          L_detect32
;detect.c,177 :: 		Bpx = 1;
0x1470	0x0E01      	MOVLW       1
0x1472	0x6E1D      	MOVWF       _Bpx 
;detect.c,178 :: 		Bpm = 0;
0x1474	0x6A21      	CLRF        _Bpm 
;detect.c,179 :: 		}
0x1476	0xD003      	BRA         L_detect33
L_detect32:
;detect.c,182 :: 		Bpx = 0;
0x1478	0x6A1D      	CLRF        _Bpx 
;detect.c,183 :: 		Bpm = 1;
0x147A	0x0E01      	MOVLW       1
0x147C	0x6E21      	MOVWF       _Bpm 
;detect.c,184 :: 		}
L_detect33:
;detect.c,185 :: 		jxm = 2;
0x147E	0x0E02      	MOVLW       2
0x1480	0x6E5A      	MOVWF       _jxm 
0x1482	0x0E00      	MOVLW       0
0x1484	0x6E5B      	MOVWF       _jxm+1 
0x1486	0x6E5C      	MOVWF       _jxm+2 
0x1488	0x6E5D      	MOVWF       _jxm+3 
;detect.c,186 :: 		}
L_detect31:
0x148A	0x0101      	MOVLB       1
;detect.c,188 :: 		bb = 1;
0x148C	0x0E01      	MOVLW       1
0x148E	0x6F4B      	MOVWF       _bb, 1
;detect.c,189 :: 		SUart0_Write('B');
0x1490	0x0E42      	MOVLW       66
0x1492	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1494	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,190 :: 		SUart0_Write('M');
0x1498	0x0E4D      	MOVLW       77
0x149A	0x0101      	MOVLB       1
0x149C	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x149E	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,191 :: 		}
L_detect30:
;detect.c,192 :: 		}
L_detect29:
;detect.c,194 :: 		if(DET1){
0x14A2	0xA880      	BTFSS       PORTA, 4 
0x14A4	0xD00B      	BRA         L_detect34
;detect.c,195 :: 		if(aa>0){ //flanco descendente : empieza a estar bloqueado
0x14A6	0x0101      	MOVLB       1
0x14A8	0x514A      	MOVF        _aa, 0, 1
0x14AA	0x0800      	SUBLW       0
0x14AC	0xE206      	BC          L_detect35
;detect.c,196 :: 		logC++;
0x14AE	0x2A3E      	INCF        _logC, 1 
;detect.c,197 :: 		aa=0;
0x14B0	0x6B4A      	CLRF        _aa, 1
;detect.c,198 :: 		SUart0_Write('C');
0x14B2	0x0E43      	MOVLW       67
0x14B4	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x14B6	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,199 :: 		}
L_detect35:
;detect.c,200 :: 		}
0x14BA	0xD00B      	BRA         L_detect36
L_detect34:
;detect.c,202 :: 		if(aa==0){ // flanco ascendente : empieza a recibir luz
0x14BC	0x0101      	MOVLB       1
0x14BE	0x514A      	MOVF        _aa, 0, 1
0x14C0	0x0A00      	XORLW       0
0x14C2	0xE107      	BNZ         L_detect37
;detect.c,203 :: 		logC++;
0x14C4	0x2A3E      	INCF        _logC, 1 
;detect.c,204 :: 		aa = 1;
0x14C6	0x0E01      	MOVLW       1
0x14C8	0x6F4A      	MOVWF       _aa, 1
;detect.c,205 :: 		SUart0_Write('C');
0x14CA	0x0E43      	MOVLW       67
0x14CC	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x14CE	0xF004ECF3  	CALL        _SUart0_Write, 0
;detect.c,206 :: 		}
L_detect37:
;detect.c,207 :: 		}
L_detect36:
;detect.c,210 :: 		if(aa==0 || bb==0 || cc==0 || dd==0 || ee==0){
0x14D2	0x0101      	MOVLB       1
0x14D4	0x514A      	MOVF        _aa, 0, 1
0x14D6	0x0A00      	XORLW       0
0x14D8	0xE00D      	BZ          L__detect48
0x14DA	0x514B      	MOVF        _bb, 0, 1
0x14DC	0x0A00      	XORLW       0
0x14DE	0xE00A      	BZ          L__detect48
0x14E0	0x5035      	MOVF        _cc, 0 
0x14E2	0x0A00      	XORLW       0
0x14E4	0xE007      	BZ          L__detect48
0x14E6	0x5036      	MOVF        _dd, 0 
0x14E8	0x0A00      	XORLW       0
0x14EA	0xE004      	BZ          L__detect48
0x14EC	0x5034      	MOVF        _ee, 0 
0x14EE	0x0A00      	XORLW       0
0x14F0	0xE001      	BZ          L__detect48
0x14F2	0xD004      	BRA         L_detect40
L__detect48:
;detect.c,211 :: 		LED_V=0;
0x14F4	0x9084      	BCF         PORTE, 0 
;detect.c,212 :: 		LED_A=0;
0x14F6	0x9A82      	BCF         PORTC, 5 
;detect.c,213 :: 		LED_R=1;
0x14F8	0x8A80      	BSF         PORTA, 5 
;detect.c,214 :: 		}
0x14FA	0xD003      	BRA         L_detect41
L_detect40:
;detect.c,216 :: 		LED_V=1;
0x14FC	0x8084      	BSF         PORTE, 0 
;detect.c,217 :: 		LED_A=1;
0x14FE	0x8A82      	BSF         PORTC, 5 
;detect.c,218 :: 		LED_R=0;
0x1500	0x9A80      	BCF         PORTA, 5 
;detect.c,219 :: 		}
L_detect41:
;detect.c,221 :: 		if(jumper1){ j1 = 100;}else{ j1 = 0; }
0x1502	0xA683      	BTFSS       PORTD, 3 
0x1504	0xD004      	BRA         L_detect42
0x1506	0x0101      	MOVLB       1
0x1508	0x0E64      	MOVLW       100
0x150A	0x6F4C      	MOVWF       detect_j1_L0, 1
0x150C	0xD002      	BRA         L_detect43
L_detect42:
0x150E	0x0101      	MOVLB       1
0x1510	0x6B4C      	CLRF        detect_j1_L0, 1
L_detect43:
;detect.c,223 :: 		if(jumper2){ j2 = 10; }else{ j2 = 0; }
0x1512	0xA882      	BTFSS       PORTC, 4 
0x1514	0xD003      	BRA         L_detect44
0x1516	0x0E0A      	MOVLW       10
0x1518	0x6F4D      	MOVWF       detect_j2_L0, 1
0x151A	0xD001      	BRA         L_detect45
L_detect44:
0x151C	0x6B4D      	CLRF        detect_j2_L0, 1
L_detect45:
;detect.c,225 :: 		if(jumper3){ j3 = 1;  }else{ j3 = 0; }
0x151E	0xA883      	BTFSS       PORTD, 4 
0x1520	0xD003      	BRA         L_detect46
0x1522	0x0E01      	MOVLW       1
0x1524	0x6F4E      	MOVWF       detect_j3_L0, 1
0x1526	0xD001      	BRA         L_detect47
L_detect46:
0x1528	0x6B4E      	CLRF        detect_j3_L0, 1
L_detect47:
;detect.c,227 :: 		pos = j1 + j2 + j3;
0x152A	0x514D      	MOVF        detect_j2_L0, 0, 1
0x152C	0x254C      	ADDWF       detect_j1_L0, 0, 1
0x152E	0x6E30      	MOVWF       _pos 
0x1530	0x514E      	MOVF        detect_j3_L0, 0, 1
0x1532	0x2630      	ADDWF       _pos, 1 
;detect.c,228 :: 		}
L_end_detect:
0x1534	0x0012      	RETURN      0
; end of _detect
_RS485Slave_Init:
;__Lib_RS485.c,40 :: 		
;__Lib_RS485.c,41 :: 		
0x1536	0x9492      	BCF         rs485_rxtx_pin_direction, BitPos(rs485_rxtx_pin_direction+0) 
;__Lib_RS485.c,42 :: 		
0x1538	0x9480      	BCF         rs485_rxtx_pin, BitPos(rs485_rxtx_pin+0) 
;__Lib_RS485.c,44 :: 		
0x153A	0x0E01      	MOVLW       1
0x153C	0x6E40      	MOVWF       __Lib_RS485_sl_state 
;__Lib_RS485.c,45 :: 		
0x153E	0x6A49      	CLRF        __Lib_RS485_specadr 
;__Lib_RS485.c,46 :: 		
0x1540	0xF057C14C  	MOVFF       FARG_RS485Slave_Init_slave_address, __Lib_RS485__sladdress
;__Lib_RS485.c,47 :: 		
0x1544	0x0101      	MOVLB       1
0x1546	0x514C      	MOVF        FARG_RS485Slave_Init_slave_address, 0, 1
0x1548	0x0A96      	XORLW       150
0x154A	0xE004      	BZ          L__RS485Slave_Init104
0x154C	0x514C      	MOVF        FARG_RS485Slave_Init_slave_address, 0, 1
0x154E	0x0AA9      	XORLW       169
0x1550	0xE001      	BZ          L__RS485Slave_Init104
0x1552	0xD005      	BRA         L_RS485Slave_Init2
L__RS485Slave_Init104:
;__Lib_RS485.c,48 :: 		
0x1554	0x0E01      	MOVLW       1
0x1556	0x194C      	XORWF       FARG_RS485Slave_Init_slave_address, 0, 1
0x1558	0x6E57      	MOVWF       __Lib_RS485__sladdress 
;__Lib_RS485.c,49 :: 		
0x155A	0x0EFF      	MOVLW       255
0x155C	0x6E49      	MOVWF       __Lib_RS485_specadr 
;__Lib_RS485.c,50 :: 		
L_RS485Slave_Init2:
;__Lib_RS485.c,51 :: 		
L_end_RS485Slave_Init:
0x155E	0x0012      	RETURN      0
; end of _RS485Slave_Init
_verificarPeticion:
;barras4.c,66 :: 		void verificarPeticion(char dat[9])
;barras4.c,68 :: 		if (datoRecibido[5])  //msm error
0x1560	0x0101      	MOVLB       1
0x1562	0x5341      	MOVF        _datoRecibido+5, 1, 1
0x1564	0xA4D8      	BTFSS       STATUS, 2 
;barras4.c,70 :: 		datoRecibido[5] = 0;         //limpiar bandera
0x1566	0x6B41      	CLRF        _datoRecibido+5, 1
;barras4.c,71 :: 		}
L_verificarPeticion8:
;barras4.c,72 :: 		if (datoRecibido[4])  //msm OK
0x1568	0x5340      	MOVF        _datoRecibido+4, 1, 1
0x156A	0xE00B      	BZ          L_verificarPeticion9
;barras4.c,74 :: 		PORTB.B1 = 1; PORTB.B2 = 1; //indicador visual de peticion
0x156C	0x8281      	BSF         PORTB, 1 
0x156E	0x8481      	BSF         PORTB, 2 
;barras4.c,75 :: 		datoRecibido[4] = 0;        //limpiar bandera
0x1570	0x6B40      	CLRF        _datoRecibido+4, 1
;barras4.c,76 :: 		j = datoRecibido[0];        //obtengo dato entrante
0x1572	0xF145C13C  	MOVFF       _datoRecibido, _j
;barras4.c,77 :: 		if(j = 0xFF) //comprueba que la peticion del maestro es correcta
0x1576	0x0EFF      	MOVLW       255
0x1578	0x6F45      	MOVWF       _j, 1
;barras4.c,79 :: 		rs485_slave_send();     //responde al maestro con in, out y blk
0x157A	0xF003EC1B  	CALL        _rs485_slave_send, 0
;barras4.c,80 :: 		PORTB.B1 = 0; PORTB.B2 = 0; //apaga indicadores visuales
0x157E	0x9281      	BCF         PORTB, 1 
0x1580	0x9481      	BCF         PORTB, 2 
;barras4.c,89 :: 		}
L_verificarPeticion11:
;barras4.c,90 :: 		}
L_verificarPeticion9:
;barras4.c,91 :: 		}
L_end_verificarPeticion:
0x1582	0x0012      	RETURN      0
; end of _verificarPeticion
_Div_8X8_U:
;__Lib_Math.c,77 :: 		
;__Lib_Math.c,84 :: 		
0x1584	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,85 :: 		
0x1586	0x0E08      	MOVLW       8
;__Lib_Math.c,86 :: 		
0x1588	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,87 :: 		
0x158A	0x3400      	RLCF        R0, 0, 0
;__Lib_Math.c,88 :: 		
0x158C	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,89 :: 		
0x158E	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,90 :: 		
0x1590	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,91 :: 		
0x1592	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,92 :: 		
0x1594	0xD002      	BRA         $+6
;__Lib_Math.c,93 :: 		
0x1596	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,94 :: 		
0x1598	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,95 :: 		
0x159A	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,96 :: 		
0x159C	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,97 :: 		
0x159E	0xD7F5      	BRA         $-20
;__Lib_Math.c,99 :: 		
L_end_Div_8X8_U:
0x15A0	0x0012      	RETURN      0
; end of _Div_8X8_U
_leerIdSlave:
;setup.c,141 :: 		char leerIdSlave(void)
;setup.c,143 :: 		if(selectSL1 == 0 && selectSL0 == 0)
0x15A2	0xB282      	BTFSC       PORTC, 1 
0x15A4	0xD005      	BRA         L_leerIdSlave8
0x15A6	0xB082      	BTFSC       PORTC, 0 
0x15A8	0xD003      	BRA         L_leerIdSlave8
L__leerIdSlave24:
;setup.c,145 :: 		idEsclavo = 10;
0x15AA	0x0E0A      	MOVLW       10
0x15AC	0x6E6B      	MOVWF       _idEsclavo 
;setup.c,146 :: 		}
0x15AE	0xD014      	BRA         L_leerIdSlave9
L_leerIdSlave8:
;setup.c,147 :: 		else if(selectSL1 == 0 && selectSL0 == 1)
0x15B0	0xB282      	BTFSC       PORTC, 1 
0x15B2	0xD005      	BRA         L_leerIdSlave12
0x15B4	0xA082      	BTFSS       PORTC, 0 
0x15B6	0xD003      	BRA         L_leerIdSlave12
L__leerIdSlave23:
;setup.c,149 :: 		idEsclavo = 20;
0x15B8	0x0E14      	MOVLW       20
0x15BA	0x6E6B      	MOVWF       _idEsclavo 
;setup.c,150 :: 		}
0x15BC	0xD00D      	BRA         L_leerIdSlave13
L_leerIdSlave12:
;setup.c,151 :: 		else if(selectSL1 == 1 && selectSL0 == 0)
0x15BE	0xA282      	BTFSS       PORTC, 1 
0x15C0	0xD005      	BRA         L_leerIdSlave16
0x15C2	0xB082      	BTFSC       PORTC, 0 
0x15C4	0xD003      	BRA         L_leerIdSlave16
L__leerIdSlave22:
;setup.c,153 :: 		idEsclavo = 30;
0x15C6	0x0E1E      	MOVLW       30
0x15C8	0x6E6B      	MOVWF       _idEsclavo 
;setup.c,154 :: 		}
0x15CA	0xD006      	BRA         L_leerIdSlave17
L_leerIdSlave16:
;setup.c,155 :: 		else if(selectSL1 == 1 && selectSL0 == 1)
0x15CC	0xA282      	BTFSS       PORTC, 1 
0x15CE	0xD004      	BRA         L_leerIdSlave20
0x15D0	0xA082      	BTFSS       PORTC, 0 
0x15D2	0xD002      	BRA         L_leerIdSlave20
L__leerIdSlave21:
;setup.c,157 :: 		idEsclavo = 40;
0x15D4	0x0E28      	MOVLW       40
0x15D6	0x6E6B      	MOVWF       _idEsclavo 
;setup.c,158 :: 		}
L_leerIdSlave20:
L_leerIdSlave17:
L_leerIdSlave13:
L_leerIdSlave9:
;setup.c,159 :: 		return idEsclavo;
0x15D8	0xF000C06B  	MOVFF       _idEsclavo, R0
;setup.c,160 :: 		}
L_end_leerIdSlave:
0x15DC	0x0012      	RETURN      0
; end of _leerIdSlave
_main:
;barras4.c,21 :: 		void main()
;barras4.c,23 :: 		init_setup();
0x15DE	0xF006ECD7  	CALL        _init_setup, 0
;barras4.c,26 :: 		UART1_Init(9600);                  // initialize UART1 module
0x15E2	0x86B8      	BSF         BAUDCON, 3, 0
0x15E4	0x0E04      	MOVLW       4
0x15E6	0x6EB0      	MOVWF       SPBRGH 
0x15E8	0x0E11      	MOVLW       17
0x15EA	0x6EAF      	MOVWF       SPBRG 
0x15EC	0x84AC      	BSF         TXSTA, 2, 0
0x15EE	0xDDEA      	RCALL       _UART1_Init
;barras4.c,27 :: 		Delay_ms(100);
0x15F0	0x0E06      	MOVLW       6
0x15F2	0x6E0B      	MOVWF       R11, 0
0x15F4	0x0E13      	MOVLW       19
0x15F6	0x6E0C      	MOVWF       R12, 0
0x15F8	0x0EAD      	MOVLW       173
0x15FA	0x6E0D      	MOVWF       R13, 0
L_main0:
0x15FC	0x2E0D      	DECFSZ      R13, 1, 0
0x15FE	0xD7FE      	BRA         L_main0
0x1600	0x2E0C      	DECFSZ      R12, 1, 0
0x1602	0xD7FC      	BRA         L_main0
0x1604	0x2E0B      	DECFSZ      R11, 1, 0
0x1606	0xD7FA      	BRA         L_main0
0x1608	0x0000      	NOP
0x160A	0x0000      	NOP
;barras4.c,29 :: 		RS485Slave_Init(slave_id);
0x160C	0x0E0A      	MOVLW       10
0x160E	0x0101      	MOVLB       1
0x1610	0x6F4C      	MOVWF       FARG_RS485Slave_Init_slave_address, 1
0x1612	0xDF91      	RCALL       _RS485Slave_Init
;barras4.c,31 :: 		slave_rx_dat[4] = 0;                        // ensure that message received flag is 0
0x1614	0x6B3A      	CLRF        _slave_rx_dat+4, 1
;barras4.c,32 :: 		slave_rx_dat[5] = 0;                        // ensure that message received flag is 0
0x1616	0x6B3B      	CLRF        _slave_rx_dat+5, 1
;barras4.c,33 :: 		slave_rx_dat[6] = 0;                        // ensure that error flag is 0
0x1618	0x6B3C      	CLRF        _slave_rx_dat+6, 1
;barras4.c,35 :: 		RCIE_bit = 1;                      // enable interrupt on UART1 receive
0x161A	0x8A9D      	BSF         RCIE_bit, BitPos(RCIE_bit+0) 
;barras4.c,36 :: 		TXIE_bit = 0;                      // disable interrupt on UART1 transmit
0x161C	0x989D      	BCF         TXIE_bit, BitPos(TXIE_bit+0) 
;barras4.c,37 :: 		PEIE_bit = 1;                      // enable peripheral interrupts
0x161E	0x8CF2      	BSF         PEIE_bit, BitPos(PEIE_bit+0) 
;barras4.c,38 :: 		GIE_bit = 1;                       // enable all interrupts
0x1620	0x8EF2      	BSF         GIE_bit, BitPos(GIE_bit+0) 
;barras4.c,41 :: 		SUart0_Write('E');
0x1622	0x0E45      	MOVLW       69
0x1624	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1626	0xF004ECF3  	CALL        _SUart0_Write, 0
;barras4.c,42 :: 		SUart0_Write('S');
0x162A	0x0E53      	MOVLW       83
0x162C	0x0101      	MOVLB       1
0x162E	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1630	0xF004ECF3  	CALL        _SUart0_Write, 0
;barras4.c,43 :: 		SUart0_Write((leerIdSlave()/10)+48);
0x1634	0xDFB6      	RCALL       _leerIdSlave
0x1636	0x0E0A      	MOVLW       10
0x1638	0x6E04      	MOVWF       R4 
0x163A	0xDFA4      	RCALL       _Div_8X8_U
0x163C	0x0E30      	MOVLW       48
0x163E	0x2400      	ADDWF       R0, 0 
0x1640	0x0101      	MOVLB       1
0x1642	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1644	0xF004ECF3  	CALL        _SUart0_Write, 0
;barras4.c,44 :: 		SUart0_Write('\r');
0x1648	0x0E0D      	MOVLW       13
0x164A	0x0101      	MOVLB       1
0x164C	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x164E	0xF004ECF3  	CALL        _SUart0_Write, 0
;barras4.c,45 :: 		SUart0_Write('\n');
0x1652	0x0E0A      	MOVLW       10
0x1654	0x0101      	MOVLB       1
0x1656	0x6F4F      	MOVWF       FARG_SUart0_Write_tch, 1
0x1658	0xF004ECF3  	CALL        _SUart0_Write, 0
;barras4.c,47 :: 		while(1)
L_main1:
;barras4.c,49 :: 		detect();
0x165C	0xDDDE      	RCALL       _detect
;barras4.c,50 :: 		if(RJ45)
0x165E	0xAC83      	BTFSS       PORTD, 6 
0x1660	0xD003      	BRA         L_main3
;barras4.c,52 :: 		bloqueo();
0x1662	0xDD2A      	RCALL       _bloqueo
;barras4.c,53 :: 		counter();
0x1664	0xF005EC86  	CALL        _counter, 0
;barras4.c,54 :: 		}
L_main3:
;barras4.c,58 :: 		if(!DET1 && !DET2 && !DET3 && !DET4 && !DET5)
0x1668	0xB880      	BTFSC       PORTA, 4 
0x166A	0xD00F      	BRA         L_main6
0x166C	0xB680      	BTFSC       PORTA, 3 
0x166E	0xD00D      	BRA         L_main6
0x1670	0xB284      	BTFSC       PORTE, 1 
0x1672	0xD00B      	BRA         L_main6
0x1674	0xBE81      	BTFSC       PORTB, 7 
0x1676	0xD009      	BRA         L_main6
0x1678	0xBC81      	BTFSC       PORTB, 6 
0x167A	0xD007      	BRA         L_main6
L__main12:
;barras4.c,59 :: 		verificarPeticion(datoRecibido);          //leer bus 485
0x167C	0x0E3C      	MOVLW       _datoRecibido
0x167E	0x0101      	MOVLB       1
0x1680	0x6F4C      	MOVWF       FARG_verificarPeticion_dat, 1
0x1682	0x0E01      	MOVLW       hi_addr(_datoRecibido)
0x1684	0x6F4D      	MOVWF       FARG_verificarPeticion_dat+1, 1
0x1686	0xDF6C      	RCALL       _verificarPeticion
0x1688	0xD001      	BRA         L_main7
L_main6:
;barras4.c,61 :: 		indicadorOcupado();
0x168A	0xDD9A      	RCALL       _indicadorOcupado
L_main7:
;barras4.c,63 :: 		}
0x168C	0xD7E7      	BRA         L_main1
;barras4.c,64 :: 		}
L_end_main:
0x168E	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0006       [2]    _init_485
0x0008      [80]    _interrupt
0x0058      [14]    _UART1_Write
0x0066      [18]    _SPI1_Write
0x0078      [18]    _UART1_Read
0x008A      [10]    _UART1_Tx_Idle
0x0094      [10]    _UART1_Data_Ready
0x009E      [20]    _EEPROM_Read
0x00B2      [56]    _EEPROM_Write
0x00EA      [26]    _SETFUN32
0x0104      [24]    _____DoIFC
0x011C      [14]    _RES032
0x012A       [8]    _FIXSIGN32
0x0132      [80]    _Mul_16X16_U
0x0182     [202]    _write_long
0x024C      [10]    _Delay_1us
0x0256     [114]    _NRM3232
0x02C8     [224]    _read_long
0x03A8      [22]    _tx_prepare
0x03BE     [386]    _RS485Slave_Send
0x0540     [108]    _read_data
0x05AC     [138]    _save_data
0x0636     [598]    _rs485_slave_send
0x088C     [106]    _init_led
0x08F6      [40]    _word2double
0x091E       [8]    _PWM1_Init
0x0926      [10]    _PWM1_Start
0x0930      [72]    _logB_reset
0x0978     [110]    _PWM1_Set_Duty
0x09E6      [48]    _SUart0_Write
0x0A16      [46]    _Equals_Double
0x0A44      [68]    _logA_reset
0x0A88      [14]    _SUart0_Init_T
0x0A96     [118]    _init_var
0x0B0C     [658]    _counter
0x0D9E      [16]    ___CC2DW
0x0DAE     [182]    _init_setup
0x0E64     [596]    _RS485Slave_Receive
0x10B8     [264]    _bloqueo
0x11C0       [4]    _indicadorOcupado
0x11C4      [86]    _UART1_Init
0x121A     [796]    _detect
0x1536      [42]    _RS485Slave_Init
0x1560      [36]    _verificarPeticion
0x1584      [30]    _Div_8X8_U
0x15A2      [60]    _leerIdSlave
0x15DE     [178]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    logA_reset_jj_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    R1
0x0001       [1]    ispunct_rslt_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    logB_reset_jj_L0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    R2
0x0002       [2]    memset_pp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0002       [2]    memchr_s_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [1]    R3
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [2]    memmove_tt_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strncat_cp_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0006       [1]    R6
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x001D       [1]    _Bpx
0x001E       [1]    _Bpy
0x001F       [1]    _Bpn
0x0020       [1]    _resultadoA
0x0021       [1]    _Bpm
0x0022       [1]    _resultadoB
0x0023       [4]    _NUMPER
0x0027       [4]    _SALEN
0x002B       [4]    _ENTRAN
0x002F       [1]    _resultadoT
0x0030       [1]    _pos
0x0031       [1]    _Apy
0x0032       [0]    _bk
0x0032       [0]    _pp
0x0033       [1]    _contador_seg
0x0034       [1]    _ee
0x0035       [1]    _cc
0x0036       [1]    _dd
0x0037       [4]    _BLOQUEOS
0x003B       [1]    _Apn
0x003C       [1]    _Apx
0x003D       [1]    _Apm
0x003E       [1]    _logC
0x003F       [1]    _iyn
0x0040       [1]    __Lib_RS485_sl_state
0x0041       [4]    _UART_Rd_Ptr
0x0045       [4]    _UART_Tx_Idle_Ptr
0x0049       [1]    __Lib_RS485_specadr
0x004A       [4]    _UART_Wr_Ptr
0x004E       [4]    _UART_Rdy_Ptr
0x0052       [1]    RS485Slave_Receive_crc_is_ok_L0
0x0053       [1]    RS485Slave_Receive_rec_L0
0x0054       [1]    RS485Slave_Receive_i_L0
0x0055       [1]    RS485Slave_Receive_key_L0
0x0056       [1]    RS485Slave_Receive_datalen_L0
0x0057       [1]    __Lib_RS485__sladdress
0x0058       [1]    _sumi
0x0059       [1]    _sumj
0x005A       [4]    _jxm
0x005E       [4]    _ixm
0x0062       [1]    _jyn
0x0063       [1]    _logAindex
0x0064       [7]    _slave_tx_dat
0x006B       [2]    _idEsclavo
0x006D     [100]    _logB
0x00D1     [100]    _logA
0x0135       [1]    _logBindex
0x0136       [6]    _slave_rx_dat
0x013C       [9]    _datoRecibido
0x0145       [1]    _j
0x0146       [4]    _contador
0x014A       [1]    _aa
0x014B       [1]    _bb
0x014C       [1]    FARG_RS485Slave_Init_slave_address
0x014C       [1]    detect_j1_L0
0x014C       [2]    FARG_verificarPeticion_dat
0x014D       [1]    detect_j2_L0
0x014E       [1]    detect_j3_L0
0x014F       [1]    FARG_PWM1_Set_Duty_new_duty
0x014F       [1]    FARG_SUart0_Write_tch
0x014F       [4]    FARG_PWM1_Init_PWM_Freq
0x014F       [1]    rs485_slave_send_e3_L0
0x0150       [1]    rs485_slave_send_s0_L0
0x0151       [1]    rs485_slave_send_s1_L0
0x0152       [1]    rs485_slave_send_s2_L0
0x0153       [1]    rs485_slave_send_s3_L0
0x0154       [1]    rs485_slave_send_b0_L0
0x0155       [1]    rs485_slave_send_b1_L0
0x0156       [1]    rs485_slave_send_b2_L0
0x0157       [1]    rs485_slave_send_b3_L0
0x0158       [2]    FARG_RS485Slave_Send_data_buffer
0x0158       [2]    FARG_read_long_addr
0x0158       [2]    FARG_write_long_addr
0x0158       [1]    FARG_tx_prepare_p0
0x0159       [1]    FARG_tx_prepare_p1
0x015A       [1]    FARG_RS485Slave_Send_datalen
0x015A       [4]    read_long_res_L0
0x015A       [4]    FARG_write_long_four_byte
0x015A       [1]    FARG_tx_prepare_p2
0x015B       [1]    RS485Slave_Send_i_L0
0x015C       [1]    RS485Slave_Send_crc_send_L0
0x015D       [1]    RS485Slave_Send_len_L0
0x015E       [1]    RS485Slave_Send_slave_address_L0
0x015E       [1]    write_long_f_byte_L0
0x015F       [1]    write_long_s_byte_L0
0x015F       [1]    RS485Slave_Send_temp_L0
0x0160       [1]    write_long_t_byte_L0
0x0161       [2]    FARG_EEPROM_Read_address
0x0161       [2]    FARG_EEPROM_Write_address
0x0163       [1]    FARG_EEPROM_Write_data_
0x0164       [1]    FARG_SPI1_Write_data_
0x0164       [1]    FARG_UART1_Write_data_
0x0165       [2]    FARG_RS485Slave_Receive_data_buffer
0x0F80       [0]    Stx0_pin
0x0F80       [0]    Srx0_pin
0x0F80       [0]    Scts0_pin
0x0F80       [0]    rs485_rxtx_pin
0x0F80       [1]    PORTA
0x0F80       [0]    RA2_bit
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F84       [1]    PORTE
0x0F92       [0]    TRISA2_bit
0x0F92       [0]    Srx0_pin_Direction
0x0F92       [0]    Scts0_pin_Direction
0x0F92       [1]    TRISA
0x0F92       [0]    rs485_rxtx_pin_direction
0x0F92       [0]    Stx0_pin_Direction
0x0F93       [1]    TRISB
0x0F94       [0]    TRISC2_bit
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F95       [1]    TRISD
0x0F96       [1]    TRISE
0x0F9D       [0]    RCIE_bit
0x0F9D       [0]    TXIE_bit
0x0F9E       [1]    PIR1
0x0FA6       [1]    EECON1
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FAA       [1]    EEADRH
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB4       [1]    CMCON
0x0FB8       [1]    BAUDCON
0x0FBD       [1]    CCP1CON
0x0FBE       [1]    CCPR1L
0x0FC1       [1]    ADCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FCA       [1]    T2CON
0x0FCB       [1]    PR2
0x0FD8       [0]    C_bit
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE1       [2]    FSR1
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [0]    PEIE_bit
0x0FF2       [0]    GIE_bit
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFD       [1]    TOSL
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
